{
	"id": "a8b2c10f-0586-cd37-c119-3bac649b5728",
	"name": "Integration Tests : /parking, /payments",
	"description": "",
	"order": [],
	"folders": [
		{
			"id": "3ec2947f-4276-b646-6386-0469018e6865",
			"name": "Parking : Garages / Operators",
			"description": "Not implemented:\n\n- Gateway must use token generated from Spreedly.\n\ncurl -i https://core.spreedly.com/v1/gateways.json \\\n  -u 'T55hhiWIMncjJMScqGKuWbbWLSP:wIbfVWlouIPICHLD2Iw0454gVYJw9dXvoYSxKxrW4PlNAG5veeBV5aS4Pal8frxD' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"gateway\":{\"gateway_type\":\"test\"}}'",
			"order": [
				"8b4acca7-cb68-4cc8-859d-456ebec0bf30",
				"914a6e19-61a8-5bc6-ad1d-8fe608eca005",
				"fcee5dbf-2ce3-4d21-c75e-434e01ff62d7",
				"77aaf796-d6f2-21fd-15b8-57619e9d3dc2",
				"6e03fdc8-9b94-2e7f-37bb-22b05a6b6349",
				"0968e7ed-0ce4-6d9a-c33c-27d4965aa7f4",
				"18f997cd-a210-fc0e-47c4-98df7ba21029",
				"54b99fb3-f2f0-e87a-3272-b82a48f62291",
				"8f5f77e8-a70c-9145-9153-da5a985c2381",
				"0210fd34-9e57-b53a-f566-22b351da15cf"
			],
			"owner": "355839",
			"collectionId": "8bd4197d-482e-9ec7-b75d-63a4daea27f5"
		},
		{
			"id": "3ec9ae07-5abc-3b09-5b4b-17cedb1b5d89",
			"name": "Payments : Gateways / Merchants < - - - Maybe dont run this.",
			"description": "",
			"order": [
				"fcb1fc8b-a605-69d9-d703-11b6f8ab63ab",
				"f1be89ea-fb3d-8b8c-c077-810011b16bc7",
				"992f892e-4a75-9040-7b84-fed027b7d047",
				"93a6d9b8-82c0-88b8-7159-1a7218ea6877",
				"78f0c5bc-40ed-1275-ea9b-d8d5897ea459",
				"ef2791a0-837d-ac1f-c77c-5f503cf424dd",
				"fb52eb15-a891-18e1-be64-0fa7b2188f13",
				"e7620fdd-6aeb-da74-7305-81f83087b0e1",
				"9837b3b3-09f8-5270-10bc-3063ae3dbc39",
				"b131a1aa-61fa-bf20-9fc0-4710a36e97ec",
				"fe5d3335-da5e-f3d3-97ff-a27d4efd8917",
				"d5697135-35ec-6267-9400-2b1cf4061b90",
				"2ca1677a-4b46-1eef-b758-59ceec9c9cc6",
				"3f5054f3-7adb-3434-7026-13e4df3a15b5",
				"858c15f3-4fb3-01a3-02ee-726de77f5dfb",
				"ffec1d48-f102-1c2c-cb7d-7f2143cdc1c9",
				"439422f3-4a0f-654f-33fd-c2bfc5b52d27"
			],
			"owner": "355839",
			"collectionId": "a8b2c10f-0586-cd37-c119-3bac649b5728"
		}
	],
	"timestamp": 1468968691100,
	"owner": "355839",
	"public": false,
	"published": false,
	"requests": [
		{
			"id": "0210fd34-9e57-b53a-f566-22b351da15cf",
			"headers": "Content-Type: application/json\n",
			"url": "{{HOST}}/v1/parking/operators?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "var response = JSON.parse(responseBody);\n\n//standard array of tests\ntests[\"Successful GET request\"] = responseCode.code === 201;\ntests[\"Response has data field\"] = responseBody.has(\"data\");\ntests[\"Response has no errors\"] = jQuery.isEmptyObject(response.errors);\ntests[\"Response has meta field\"] = responseBody.has(\"meta\");\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468954078357,
			"name": "Create a Car Park Business Operator.",
			"description": "Request creation of a Car Park Business Operator from JSON data in the request body.",
			"collectionId": "a8b2c10f-0586-cd37-c119-3bac649b5728",
			"responses": [],
			"folder": "3ec2947f-4276-b646-6386-0469018e6865",
			"rawModeData": "{\n  \"address\": \"Cyberspace\",\n  \"centre_id\": \"{{centre_id}}\",\n  \"merchant_code\": \"parkiq_london\",\n  \"name\": \"Automation Test Operator\",\n  \"parking_time_bonus\": 180,\n  \"phone_number\": \"445550000\",\n  \"tax_id\": \"12345678\"\n}"
		},
		{
			"id": "0968e7ed-0ce4-6d9a-c33c-27d4965aa7f4",
			"headers": "",
			"url": "{{HOST}}/v1/parking/operators?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "var response = JSON.parse(responseBody);\n\n//standard array of tests\ntests[\"Successful GET request\"] = responseCode.code === 200;\ntests[\"Response has data field\"] = responseBody.has(\"data\");\ntests[\"Response has no errors\"] = jQuery.isEmptyObject(response.errors);\ntests[\"Response has meta field\"] = responseBody.has(\"meta\");\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468876440775,
			"name": "List all Car Park Business Operators.",
			"description": "Request an array of Car Park Business Operators.",
			"collectionId": "a8b2c10f-0586-cd37-c119-3bac649b5728",
			"responses": [],
			"folder": "3ec2947f-4276-b646-6386-0469018e6865"
		},
		{
			"id": "18f997cd-a210-fc0e-47c4-98df7ba21029",
			"headers": "",
			"url": "{{HOST}}/v1/parking/operators/{{seed_centre}}?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "var response = JSON.parse(responseBody);\n\n//standard array of tests\ntests[\"Successful GET request\"] = responseCode.code === 200;\ntests[\"Response has data field\"] = responseBody.has(\"data\");\ntests[\"Response has no errors\"] = jQuery.isEmptyObject(response.errors);\ntests[\"Response has meta field\"] = responseBody.has(\"meta\");\n\ntests[\"Correct address returned\"] = response.data.address === \"Cyberspace\";\ntests[\"Correct centre returned\"] = response.data.centre_id === environment.centre;\ntests[\"Correct merchant_code returned\"] = response.data.merchant_code === \"parkiq_london\";\ntests[\"Correct name returned\"] = response.data.name === \"Automation Test Operator\";\ntests[\"Correct parking_time_bonus returned\"] = response.data.parking_time_bonus === 180;\ntests[\"Correct phone_number returned\"] = response.data.phone_number === \"445550000\";\ntests[\"Correct tax_id returned\"] = response.data.tax_id === \"12345678\";",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1469051507855,
			"name": "Retrieve information for a Car Park Business Operator.",
			"description": "Retrieve all the details for a Car Park Business Operator with the given centre_id.",
			"collectionId": "a8b2c10f-0586-cd37-c119-3bac649b5728",
			"responses": []
		},
		{
			"id": "2ca1677a-4b46-1eef-b758-59ceec9c9cc6",
			"headers": "Authorization: {{Authorization}}\n",
			"url": "{{HOST}}/v1/payments/payment_methods/{{payment_method_token}}?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Successful Deletion\"] = responseCode.code === 204;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468864282441,
			"name": "Redact a payment method.",
			"description": "Request a redaction of a payment method. Redacting a payment method does not delete it. Its transaction history is maintained as your permanent record . However, all sensitive information (e.g. PAN, CVV) is removed immediately and permanently. A redacted payment method can no longer be used for transactions since the account information will have been disposed of.",
			"collectionId": "a8b2c10f-0586-cd37-c119-3bac649b5728",
			"responses": [],
			"folder": "3ec9ae07-5abc-3b09-5b4b-17cedb1b5d89"
		},
		{
			"id": "3f5054f3-7adb-3434-7026-13e4df3a15b5",
			"headers": "Authorization: {{payment_token}}\nContent-Type: application/json\n",
			"url": "{{HOST}}/v1/payments/merchants/{{merchant_id}}?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "PATCH",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Successful PATCH request\"] = responseCode.code === 204;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468623145717,
			"name": "Update a merchant.",
			"description": "Request update of a merchant from JSON data in the request body.",
			"collectionId": "a8b2c10f-0586-cd37-c119-3bac649b5728",
			"responses": [],
			"folder": "3ec9ae07-5abc-3b09-5b4b-17cedb1b5d89",
			"rawModeData": "{\n  \"code\": \"Upd8t3d-C0d3\",\n  \"features\": [\n    \"food\"\n  ],\n  \"location_descriptor\": \"in the back, on the left\",\n  \"name\": \"Merchant of Venice\",\n  \"name_descriptor\": \"Some play\"\n}"
		},
		{
			"id": "439422f3-4a0f-654f-33fd-c2bfc5b52d27",
			"headers": "Authorization: {{payment_token}}\n",
			"url": "{{HOST}}/v1/payments/gateways/{{gateway_id}}?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Successful Deletion\"] = responseCode.code === 204;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468623700516,
			"name": "Delete a gateway.",
			"description": "Request deletion of a gateway.",
			"collectionId": "a8b2c10f-0586-cd37-c119-3bac649b5728",
			"responses": [],
			"folder": "3ec9ae07-5abc-3b09-5b4b-17cedb1b5d89"
		},
		{
			"id": "54b99fb3-f2f0-e87a-3272-b82a48f62291",
			"headers": "Content-Type: application/json\n",
			"url": "{{HOST}}/v1/parking/operators/{{centre_id}}?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "PATCH",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Operator successfully updated\"] = responseCode.code === 204;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1469051534878,
			"name": "Update a Car Park Business Operator.",
			"description": "Request update of a Car Park Business Operator from JSON data in the request body.",
			"collectionId": "a8b2c10f-0586-cd37-c119-3bac649b5728",
			"responses": [],
			"rawModeData": "{\n  \"address\": \"Cyberspace, Ariel Way, London, W12 7Gf, United Kingdom\",\n  \"merchant_code\": \"parkiq_london\",\n  \"name\": \"Westfield London\",\n  \"parking_time_bonus\": 180,\n  \"phone_number\": \"015550001111\",\n  \"tax_id\": \"1234567\"\n}"
		},
		{
			"id": "6e03fdc8-9b94-2e7f-37bb-22b05a6b6349",
			"headers": "Content-Type: application/json\n",
			"url": "{{HOST}}/v1/parking/garages/{{garage_id}}?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "PATCH",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Garage successfully updated\"] = responseCode.code === 204;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1469051477246,
			"name": "Update a garage.",
			"description": "Request update of parking garage details from JSON data in the request body.",
			"collectionId": "a8b2c10f-0586-cd37-c119-3bac649b5728",
			"responses": [],
			"rawModeData": "{\n  \"locations\": [\n         { \"available\": 105, \"capacity\": 325, \"condition\": \"spaces\", \"location\": \"10-1\", \"occupied\": 249, \"reserved\": null},\n         { \"available\": 200, \"capacity\": 249, \"condition\": \"spaces\", \"location\": \"10-2\", \"occupied\": 200, \"reserved\": null},\n         { \"available\": 51, \"capacity\": 200, \"condition\": \"spaces\", \"location\": \"10-3\", \"occupied\": 149, \"reserved\": null}\n  ],\n  \"name\": \"patch_{{$timestamp}}\"\n}"
		},
		{
			"id": "77aaf796-d6f2-21fd-15b8-57619e9d3dc2",
			"headers": "",
			"url": "{{HOST}}/v1/parking/garages/{{garage_id}}?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "var response = JSON.parse(responseBody);\n\n//standard array of tests\ntests[\"Successful GET request\"] = responseCode.code === 200;\ntests[\"Response has data field\"] = responseBody.has(\"data\");\ntests[\"Response has no errors\"] = jQuery.isEmptyObject(response.errors);\ntests[\"Response has meta field\"] = responseBody.has(\"meta\");\n\n//case specific tests\ntests[\"locations are returned in the correct format\"] = response.data.locations[0] !== null && typeof response.data.locations[0] === 'object';\ntests[\"locations containe 'available' field\"] = response.data.locations[0].hasOwnProperty('available');\ntests[\"locations containe 'capacity' field\"] = response.data.locations[0].hasOwnProperty('capacity');\ntests[\"locations containe 'condition' field\"] = response.data.locations[0].hasOwnProperty('condition');\ntests[\"locations containe 'location' field\"] = response.data.locations[0].hasOwnProperty('location');\ntests[\"locations containe 'occupied' field\"] = response.data.locations[0].hasOwnProperty('occupied');\ntests[\"locations containe 'reserved' field\"] = response.data.locations[0].hasOwnProperty('reserved');",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468875859824,
			"name": "Retrieve a garage.",
			"description": "Retrieve details about a garage.",
			"collectionId": "a8b2c10f-0586-cd37-c119-3bac649b5728",
			"responses": [],
			"folder": "3ec2947f-4276-b646-6386-0469018e6865"
		},
		{
			"id": "78f0c5bc-40ed-1275-ea9b-d8d5897ea459",
			"headers": "Authorization: {{payment_token}}\nContent-Type: application/json\n",
			"url": "{{HOST}}/v1/payments/merchants?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "var response = JSON.parse(responseBody);\n\n//set environment variables\npostman.setEnvironmentVariable('merchant_code',response.data.code);\npostman.setEnvironmentVariable('merchant_id',response.data.merchant_id);\npostman.setEnvironmentVariable('merchant_name',response.data.name);\n\n//standard array of tests\ntests[\"Successful POST request\"] = responseCode.code === 201;\ntests[\"Response has data field\"] = responseBody.has(\"data\");\ntests[\"Response has no errors\"] = jQuery.isEmptyObject(response.errors);\ntests[\"Response has meta field\"] = responseBody.has(\"meta\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468885810751,
			"name": "Create a merchant.",
			"description": "Request creation of a merchant from JSON data in the request body.",
			"collectionId": "a8b2c10f-0586-cd37-c119-3bac649b5728",
			"responses": [],
			"folder": "3ec9ae07-5abc-3b09-5b4b-17cedb1b5d89",
			"rawModeData": "{\n  \"code\": \"AutomationTestMerchant\",\n  \"features\": [\n    \"food\"\n  ],\n  \"gateway_id\": \"{{gateway_id}}\",\n  \"location_descriptor\": \"in the back, on the left\",\n  \"name\": \"Merchant of Venice\",\n  \"name_descriptor\": \"Some play\"\n}"
		},
		{
			"id": "858c15f3-4fb3-01a3-02ee-726de77f5dfb",
			"headers": "Authorization: {{payment_token}}\n",
			"url": "{{HOST}}/v1/payments/merchants/{{merchant_id}}?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "urlencoded",
			"version": 2,
			"tests": "tests[\"Successful Deletion\"] = responseCode.code === 204;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468623487181,
			"name": "Delete a merchant.",
			"description": "Request deletion of a merchant.",
			"collectionId": "a8b2c10f-0586-cd37-c119-3bac649b5728",
			"responses": [],
			"folder": "3ec9ae07-5abc-3b09-5b4b-17cedb1b5d89"
		},
		{
			"id": "8b4acca7-cb68-4cc8-859d-456ebec0bf30",
			"headers": "Content-Type: application/json\n",
			"url": "{{HOST}}/v1/parking/garages?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "var response = JSON.parse(responseBody);\n\n//set environment variables\npostman.setEnvironmentVariable('garage_id',response.data.garage_id);\n\n//standard array of tests\ntests[\"Successful GET request\"] = responseCode.code === 201;\ntests[\"Response has data field\"] = responseBody.has(\"data\");\ntests[\"Response has no errors\"] = jQuery.isEmptyObject(response.errors);\ntests[\"Response has meta field\"] = responseBody.has(\"meta\");\n\n//case specific tests\ntests[\"locations are returned in the correct format\"] = response.data.locations !== null && typeof response.data.locations === 'object';\ntests[\"locations containe 'available' field\"] = response.data.locations[0].hasOwnProperty('available');\ntests[\"locations containe 'capacity' field\"] = response.data.locations[0].hasOwnProperty('capacity');\ntests[\"locations containe 'condition' field\"] = response.data.locations[0].hasOwnProperty('condition');\ntests[\"locations containe 'location' field\"] = response.data.locations[0].hasOwnProperty('location');\ntests[\"locations containe 'occupied' field\"] = response.data.locations[0].hasOwnProperty('occupied');\ntests[\"locations containe 'reserved' field\"] = response.data.locations[0].hasOwnProperty('reserved');",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468953933082,
			"name": "Create a garage.",
			"description": "Request creation of a parking garage from JSON data in the request body.",
			"collectionId": "a8b2c10f-0586-cd37-c119-3bac649b5728",
			"responses": [],
			"folder": "3ec2947f-4276-b646-6386-0469018e6865",
			"rawModeData": "{\n  \"locations\": [\n    {\n      \"available\": 100,\n      \"capacity\": 200,\n      \"condition\": \"spaces\",\n      \"occupied\": 50,\n      \"reserved\": 50,\n      \"location\": \"string\"\n    }\n  ],\n  \"centre_id\": \"{{seed_centre}}\",\n  \"name\": \"automation test garage\"\n}"
		},
		{
			"id": "8f5f77e8-a70c-9145-9153-da5a985c2381",
			"headers": "",
			"url": "{{HOST}}/v1/parking/operators/{{centre_id}}?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Successful deletion\"] = responseCode.code === 204;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468877112871,
			"name": "Delete a Car Park Business Operator.",
			"description": "Request deletion of a Car Park Business Operator.",
			"collectionId": "a8b2c10f-0586-cd37-c119-3bac649b5728",
			"responses": [],
			"folder": "3ec2947f-4276-b646-6386-0469018e6865"
		},
		{
			"id": "914a6e19-61a8-5bc6-ad1d-8fe608eca005",
			"headers": "",
			"url": "{{HOST}}/v1/parking/garages/{{seed_centre}}/summary?api_key={{api_key}}&fields",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "var response = JSON.parse(responseBody);\n\n//standard array of tests\ntests[\"Successful GET request\"] = responseCode.code === 200;\ntests[\"Response has data field\"] = responseBody.has(\"data\");\ntests[\"Response has no errors\"] = jQuery.isEmptyObject(response.errors);\ntests[\"Response has meta field\"] = responseBody.has(\"meta\");\n\n//endpoint specific tests\ntests[\"returns garage from the correct centre\"] = response.data.centre_id === environment.seed_centre;\ntests[\"stale is either 'true' or 'false'\"] = typeof response.data.stale === 'boolean';\ntests[\"there are fewer available spaces than total spaces\"] = response.data.available < response.data.capacity;\ntests[\"number of spaces all add up\"] = response.data.capacity === (response.data.available + response.data.occupied + response.data.reserved);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468953945479,
			"name": "Retrieve information about parking garages in a specific centre.",
			"description": "Retrieve a summary of details for all parking locations in a specific centre.",
			"collectionId": "a8b2c10f-0586-cd37-c119-3bac649b5728",
			"responses": [],
			"folder": "3ec2947f-4276-b646-6386-0469018e6865"
		},
		{
			"id": "93a6d9b8-82c0-88b8-7159-1a7218ea6877",
			"headers": "Authorization: {{payment_token}}\nContent-Type: application/json\n",
			"url": "{{HOST}}/v1/payments/gateways/{{gateway_id}}?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "PATCH",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Successful PATCH request\"] = responseCode.code === 204;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468619620899,
			"name": "Update a gateway.",
			"description": "Request update of a gateway from JSON data in the request body.",
			"collectionId": "a8b2c10f-0586-cd37-c119-3bac649b5728",
			"responses": [],
			"folder": "3ec9ae07-5abc-3b09-5b4b-17cedb1b5d89",
			"rawModeData": "{\n  \"name\": \"Renamed Test Gateway\"\n}"
		},
		{
			"id": "9837b3b3-09f8-5270-10bc-3063ae3dbc39",
			"headers": "Content-Type: application/json\n",
			"url": "{{HOST}}/v1/payments/transactions/authorize?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468885800083,
			"name": "Authorize a payment method.",
			"description": "Request the authorization of a payment method from JSON data in the request body. This transaction is used to authorize a payment amount, and such payment method can be subsequently captured or voided in order to complete the transaction.",
			"collectionId": "a8b2c10f-0586-cd37-c119-3bac649b5728",
			"responses": [],
			"folder": "3ec9ae07-5abc-3b09-5b4b-17cedb1b5d89",
			"rawModeData": "{\n    \"merchant_code\": \"AutomationTestMerchant\",\n    \"amount\": 527,\n    \"order_id\": \"authorise order id goes here\",\n    \"description\": \"authorize description goes here\",\n    \"currency_code\":\"GBP\",\n    \"gateway_specific_fields\": { \"stripe\": { \"application_fee\": 119 } },\n    \"payment_method_token\":\"MZY80lcoRvH8pJREazlvJdFh5Oz\"\n}"
		},
		{
			"id": "992f892e-4a75-9040-7b84-fed027b7d047",
			"headers": "Authorization: {{payment_token}}\n",
			"url": "{{HOST}}/v1/payments/gateways?page=1&per_page=250&api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "var response = JSON.parse(responseBody);\n\n//standard array of tests\ntests[\"Successful POST request\"] = responseCode.code === 200;\ntests[\"Response has data field\"] = responseBody.has(\"data\");\ntests[\"Response has no errors\"] = jQuery.isEmptyObject(response.errors);\ntests[\"Response has meta field\"] = responseBody.has(\"meta\");\n\n//case specific tests\ntests[\"At least one gateway is returned\"] = response.data.length > 0;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468619978885,
			"name": "List gateways.",
			"description": "Request an array of gateways.",
			"collectionId": "a8b2c10f-0586-cd37-c119-3bac649b5728",
			"responses": [],
			"folder": "3ec9ae07-5abc-3b09-5b4b-17cedb1b5d89"
		},
		{
			"id": "b131a1aa-61fa-bf20-9fc0-4710a36e97ec",
			"headers": "Content-Type: application/json\n",
			"url": "{{HOST}}/v1/payments/transactions/purchase?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468885804984,
			"name": "Charge a payment method.",
			"description": "Request the purchase of a payment method from JSON data in the request body. This transaction is used to authorize and capture a payment amount.",
			"collectionId": "a8b2c10f-0586-cd37-c119-3bac649b5728",
			"responses": [],
			"folder": "3ec9ae07-5abc-3b09-5b4b-17cedb1b5d89",
			"rawModeData": "{\n    \"merchant_code\": \"AutomationTestMerchant\",\n    \"amount\": 527,\n    \"order_id\": \"authorise order id goes here\",\n    \"description\": \"authorize description goes here\",\n    \"currency_code\":\"GBP\",\n    \"gateway_specific_fields\": { \"stripe\": { \"application_fee\": 119 } },\n    \"payment_method_token\":\"MZY80lcoRvH8pJREazlvJdFh5Oz\"\n}"
		},
		{
			"id": "d5697135-35ec-6267-9400-2b1cf4061b90",
			"headers": "",
			"url": "{{HOST}}/v1/payments/payment_methods/{{payment_method_token}}?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "var response = JSON.parse(responseBody);\n\n//standard array of tests\ntests[\"Successful GET request\"] = responseCode.code === 200;\ntests[\"Response has data field\"] = responseBody.has(\"data\");\ntests[\"Response has no errors\"] = jQuery.isEmptyObject(response.errors);\ntests[\"Response has meta field\"] = responseBody.has(\"meta\");\n\n//case specific tests\ntests[\"card_type returns correctly\"] = response.data.card_type === \"visa\";\ntests[\"first_name returns correctly\"] = response.data.first_name === \"John\";\ntests[\"last_name returns correctly\"] = response.data.last_name === \"Cena\";\ntests[\"stored card number values return correctly\"] = response.data.first_six_digits === \"411111\" && response.data.last_four_digits === \"1111\";\n// tests[\"parking_card returns correctly\"] = response.data.parking_card === true;\ntests[\"payment_method_token returns correctly\"] = response.data.payment_method_token === environment.payment_method_token;\ntests[\"month returns correctly\"] = response.data.month === \"7\";\ntests[\"year returns correctly\"] = response.data.year === \"2020\";\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468868009695,
			"name": "Retrieve a payment method.",
			"description": "Request the details of a payment method.",
			"collectionId": "a8b2c10f-0586-cd37-c119-3bac649b5728",
			"responses": [],
			"folder": "3ec9ae07-5abc-3b09-5b4b-17cedb1b5d89"
		},
		{
			"id": "e7620fdd-6aeb-da74-7305-81f83087b0e1",
			"headers": "",
			"url": "{{HOST}}/v1/payments/payment_methods/{{payment_method_token}}/verify?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "var response = JSON.parse(responseBody);\npostman.setEnvironmentVariable('transaction_id',response.data.transaction_id);\n\n//standard array of tests\ntests[\"Successful POST request\"] = responseCode.code === 200;\ntests[\"Response has data field\"] = responseBody.has(\"data\");\ntests[\"Response has no errors\"] = jQuery.isEmptyObject(response.errors);\ntests[\"Response has meta field\"] = responseBody.has(\"meta\");\n\n\ntests[\"Message indicates success\"] = response.data.message === \"Succeeded!\";\ntests[\"Verified card is a Visa\"] = response.data.payment_method.card_type === \"visa\";\ntests[\"Verified card has correct fingerprint\"] = response.data.payment_method.fingerprint === environment.fingerprint;\ntests[\"Verified card has correct first_six_digits\"] = response.data.payment_method.first_six_digits === \"411111\";\ntests[\"Verified card has correct last_four_digits\"] = response.data.payment_method.last_four_digits === \"1111\";\ntests[\"Verified card has correct payment_method_token\"] = response.data.payment_method.payment_method_token === environment.payment_method_token;\ntests[\"Verified card has correct payment_method_type\"] = response.data.payment_method.payment_method_type === \"credit_card\";\ntests[\"Verified card has correct fingerprint\"] = response.data.transaction_type === \"Verification\";\ntests[\"Verified that response has not been cancelled\"] = response.data.response.cancelled === false;\ntests[\"Verified that response is not still pending\"] = response.data.response.pending === false;\ntests[\"Verified that response is successful\"] = response.data.response.success === true;\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468615080894,
			"name": "Verify and retain a payment method.",
			"description": "Request verification of a payment method checking if it is in good standing. This call will also retain the payment method",
			"collectionId": "a8b2c10f-0586-cd37-c119-3bac649b5728",
			"responses": [],
			"folder": "3ec9ae07-5abc-3b09-5b4b-17cedb1b5d89",
			"rawModeData": "Data to verify and retain a payment method."
		},
		{
			"id": "ef2791a0-837d-ac1f-c77c-5f503cf424dd",
			"headers": "Authorization: {{payment_token}}\n",
			"url": "{{HOST}}/v1/payments/merchants/{{merchant_id}}?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "var response = JSON.parse(responseBody);\n\n//standard array of tests\ntests[\"Successful GET request\"] = responseCode.code === 200;\ntests[\"Response has data field\"] = responseBody.has(\"data\");\ntests[\"Response has no errors\"] = jQuery.isEmptyObject(response.errors);\ntests[\"Response has meta field\"] = responseBody.has(\"meta\");\n\n//case specific tests\ntests[\"Gateway_id returns correctly\"] = response.data.gateway_id === parseInt(environment.gateway_id);\ntests[\"Merchant_id returns correctly\"] = response.data.merchant_id === parseInt(environment.merchant_id);\ntests[\"Gateway_name returns correctly\"] = response.data.gateway_name === environment.name;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468622902332,
			"name": "Retrieve a merchant.",
			"description": "Request the details of a merchant.",
			"collectionId": "a8b2c10f-0586-cd37-c119-3bac649b5728",
			"responses": [],
			"folder": "3ec9ae07-5abc-3b09-5b4b-17cedb1b5d89"
		},
		{
			"id": "f1be89ea-fb3d-8b8c-c077-810011b16bc7",
			"headers": "Authorization: {{payment_token}}\n",
			"url": "{{HOST}}/v1/payments/gateways/{{gateway_id}}?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "var response = JSON.parse(responseBody);\n\n//standard array of tests\ntests[\"Successful GET request\"] = responseCode.code === 200;\ntests[\"Response has data field\"] = responseBody.has(\"data\");\ntests[\"Response has no errors\"] = jQuery.isEmptyObject(response.errors);\ntests[\"Response has meta field\"] = responseBody.has(\"meta\");\n\ntests[\"Gateway_id is returned correctly\"] = response.data.gateway_id === parseInt(environment.gateway_id);\ntests[\"gateway_name is returned correctly\"] = response.data.name === environment.gateway_name;\ntests[\"gateway token is returned correctly\"] = response.data.token === environment.gateway_token;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468619417954,
			"name": "Retrieve a gateway.",
			"description": "Request the details of a gateway.",
			"collectionId": "a8b2c10f-0586-cd37-c119-3bac649b5728",
			"responses": [],
			"folder": "3ec9ae07-5abc-3b09-5b4b-17cedb1b5d89"
		},
		{
			"id": "fb52eb15-a891-18e1-be64-0fa7b2188f13",
			"headers": "Content-Type: application/json\n",
			"url": "https://core.spreedly.com/v1/payment_methods.json?environment_key={{spreedly_env_key}}&api_key={{spreedly_api_key}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "var response = JSON.parse(responseBody);\n// postman.setEnvironmentVariable('payment_method_token',response.transaction.payment_method.token);\n// postman.setEnvironmentVariable('fingerprint',response.transaction.payment_method.fingerprint);\n\ntests[\"Successful POST request\"] = responseCode.code === 201;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468881744135,
			"name": "Spreedly: Add Card",
			"description": "",
			"collectionId": "a8b2c10f-0586-cd37-c119-3bac649b5728",
			"responses": [],
			"folder": "3ec9ae07-5abc-3b09-5b4b-17cedb1b5d89",
			"rawModeData": "{\n  \"month\": \"8\",\n  \"year\": \"2019\",\n  \"number\": \"4111111111111111\", \n  \"card_type\": \"visa\", \n  \"first_name\": \"Johnny\", \n  \"last_name\": \"Lyonhart: Secret Agent\", \n  \"zip\": \"17377\"\n}"
		},
		{
			"id": "fcb1fc8b-a605-69d9-d703-11b6f8ab63ab",
			"headers": "Authorization: {{payment_token}}\nContent-Type: application/json\n",
			"url": "{{HOST}}/v1/payments/gateways?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "var response = JSON.parse(responseBody);\n\n//set environment variables\npostman.setEnvironmentVariable('gateway_token',response.data.token);\npostman.setEnvironmentVariable('gateway_name',response.data.name);\npostman.setEnvironmentVariable('gateway_id',response.data.gateway_id);\n\n//standard array of tests\ntests[\"Successful POST request\"] = responseCode.code === 201;\ntests[\"Response has data field\"] = responseBody.has(\"data\");\ntests[\"Response has no errors\"] = jQuery.isEmptyObject(response.errors);\ntests[\"Response has meta field\"] = responseBody.has(\"meta\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468623705429,
			"name": "Create a gateway.",
			"description": "Request creation of a gateway from JSON data in the request body.",
			"collectionId": "a8b2c10f-0586-cd37-c119-3bac649b5728",
			"responses": [],
			"folder": "3ec9ae07-5abc-3b09-5b4b-17cedb1b5d89",
			"rawModeData": "{\n  \"name\": \"test_gateway_{{$timestamp}}\",\n  \"token\": \"371sG4t3w4y_{{$timestamp}}\"\n}"
		},
		{
			"id": "fcee5dbf-2ce3-4d21-c75e-434e01ff62d7",
			"headers": "",
			"url": "{{HOST}}/v1/parking/garages?centre_id={{seed_centre}}&fields=available,capacity,centre_id,created_at,garage_id,locations&page=1&per_page=250&api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "var response = JSON.parse(responseBody);\n\n//standard array of tests\ntests[\"Successful GET request\"] = responseCode.code === 200;\ntests[\"Response has data field\"] = responseBody.has(\"data\");\ntests[\"Response has no errors\"] = jQuery.isEmptyObject(response.errors);\ntests[\"Response has meta field\"] = responseBody.has(\"meta\");\n\n//case specific tests\ntests[\"locations are returned in the correct format\"] = response.data[0].locations[0] !== null && typeof response.data[0].locations[0] === 'object';\ntests[\"locations containe 'available' field\"] = response.data[0].locations[0].hasOwnProperty('available');\ntests[\"locations containe 'capacity' field\"] = response.data[0].locations[0].hasOwnProperty('capacity');\ntests[\"locations containe 'condition' field\"] = response.data[0].locations[0].hasOwnProperty('condition');\ntests[\"locations containe 'location' field\"] = response.data[0].locations[0].hasOwnProperty('location');\ntests[\"locations containe 'occupied' field\"] = response.data[0].locations[0].hasOwnProperty('occupied');\ntests[\"locations containe 'reserved' field\"] = response.data[0].locations[0].hasOwnProperty('reserved');",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468953965471,
			"name": "Retrieve information for garages.",
			"description": "Retrieve detailed information for parking garages.",
			"collectionId": "a8b2c10f-0586-cd37-c119-3bac649b5728",
			"responses": [],
			"folder": "3ec2947f-4276-b646-6386-0469018e6865"
		},
		{
			"id": "fe5d3335-da5e-f3d3-97ff-a27d4efd8917",
			"headers": "Content-Type: application/json\n",
			"url": "{{HOST}}/v1/payments/payment_methods/{{payment_method_token}}?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "PATCH",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Successfully updated payment method\"] = responseCode.code === 204;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468867898692,
			"name": "Update payment method details.",
			"description": "Request an update of the details associated with a payment method.",
			"collectionId": "a8b2c10f-0586-cd37-c119-3bac649b5728",
			"responses": [],
			"folder": "3ec9ae07-5abc-3b09-5b4b-17cedb1b5d89",
			"rawModeData": "{\n  \"country\": \"UK\",\n  \"first_name\": \"John\",\n  \"last_name\": \"Cena\",\n  \"month\": 7,\n  \"postal_code\": \"90210\",\n  \"year\": 2020\n}"
		},
		{
			"id": "ffec1d48-f102-1c2c-cb7d-7f2143cdc1c9",
			"headers": "Authorization: {{payment_token}}\n",
			"url": "{{HOST}}/v1/payments/merchants?page=1&per_page=250&api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "var response = JSON.parse(responseBody);\n\n//standard array of tests\ntests[\"Successful GET request\"] = responseCode.code === 200;\ntests[\"Response has data field\"] = responseBody.has(\"data\");\ntests[\"Response has no errors\"] = jQuery.isEmptyObject(response.errors);\ntests[\"Response has meta field\"] = responseBody.has(\"meta\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468883301553,
			"name": "List merchants.",
			"description": "Request an array of merchants.",
			"collectionId": "a8b2c10f-0586-cd37-c119-3bac649b5728",
			"responses": [],
			"folder": "3ec9ae07-5abc-3b09-5b4b-17cedb1b5d89"
		}
	]
}