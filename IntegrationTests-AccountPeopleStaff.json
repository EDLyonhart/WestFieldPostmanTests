{
	"id": "8bd4197d-482e-9ec7-b75d-63a4daea27f5",
	"name": "Integration Tests : /account, /people, /staff",
	"description": "",
	"order": [],
	"folders": [
		{
			"id": "440b9caa-5c31-c977-e50c-273f116922d3",
			"name": "People routes",
			"description": "",
			"order": [
				"58322127-57cc-d2f9-6cdd-6f6d995b01ff",
				"20063235-b391-7af9-ef36-9b816b6cf4c4",
				"d22bf54b-883e-7d05-4e8a-1f5887189c51",
				"c716675b-695a-88a8-5d4e-ae15fd5d287d",
				"36bf825f-ffa1-09fa-1883-3ba6898c9ad6",
				"14b1e700-afac-145f-48b2-c3f89c66e759"
			],
			"owner": "355839",
			"collectionId": "8bd4197d-482e-9ec7-b75d-63a4daea27f5"
		},
		{
			"id": "f4a3efc7-b4cf-8ce9-73dc-174cea88fcd8",
			"name": "QAA-1125 : Accounts : user accounts",
			"description": "",
			"order": [
				"acb47230-6023-0074-044b-5a5a6fdac487",
				"40f1e866-d1b1-bffd-e666-18a5f449f425",
				"c857f37e-4b41-5eeb-1fae-4ae1bb6537ff",
				"93272a65-fde2-eec5-bc7e-b3d470f32be3",
				"65891a56-f0e3-9ac8-7435-975b0b12d760",
				"ce4b617a-772d-9e27-bf8b-7b3c907a9253",
				"895f33d4-62e3-9dcc-b0dc-51f14c3699bf",
				"762a5c31-2390-c13d-bffe-284d93e808c6",
				"11c58310-b5c3-8fd8-10d1-8761b64ecec2"
			],
			"owner": "355839",
			"collectionId": "8bd4197d-482e-9ec7-b75d-63a4daea27f5"
		},
		{
			"id": "cdeff92f-24d9-6fcc-dbcb-11fb9852e42e",
			"name": "QAA-1128 : Accounts : credit cards",
			"description": "",
			"order": [
				"57c0435a-a4d0-c3e7-8499-05a3228534b3",
				"780d85ad-b990-6d17-126a-b4050df772fc",
				"b19d6b97-b5bf-6fab-ef7a-6124d75a3f65",
				"16a5ea57-819c-9980-18a8-b26bf2c28c71",
				"84053bbb-f0ac-8256-c72a-33e7ae0d65dd",
				"a4d67325-c53f-1abf-ee56-f44fd583d380",
				"d366c175-586e-487d-6c0a-3c3dadef2744"
			],
			"owner": "355839",
			"collectionId": "8bd4197d-482e-9ec7-b75d-63a4daea27f5"
		},
		{
			"id": "2483beb5-79d1-b245-9929-36a9dcc1aff7",
			"name": "QAA-1129 : Accounts : interests",
			"description": "",
			"order": [
				"d845e634-5dd7-5bb7-8c73-e4a5838939c5",
				"23add68a-f51c-350d-9d05-e4be68d6cee2",
				"07d8a95e-7c8c-fac0-60c3-2ac69fb39cae",
				"2605b94b-2aaf-642c-1ea6-aae387f86b93"
			],
			"owner": "355839",
			"collectionId": "8bd4197d-482e-9ec7-b75d-63a4daea27f5"
		},
		{
			"id": "097d7cf5-b1e2-5d7c-4438-b9c896b42c74",
			"name": "QAA-1130 : Accounts : kids (plus /people routes)",
			"description": "",
			"order": [
				"4c9e4dde-3e78-bcfc-2d77-47205c42c3ed",
				"17373989-3541-b7c2-1002-9f6a7ff39845",
				"2122a71b-38b7-969b-2834-a7c78c913a76",
				"5755ea51-ecd4-fb8e-2c2b-01af9f59ceb4"
			],
			"owner": "355839",
			"collectionId": "8bd4197d-482e-9ec7-b75d-63a4daea27f5"
		},
		{
			"id": "19672a79-5cfb-a189-f872-196cb8c2765a",
			"name": "QAA-1131 : Accounts : newsletters",
			"description": "",
			"order": [
				"74d172f2-b01f-46f1-9202-5c60196b4764",
				"7b58131a-731b-dcdb-e7c4-6afa932f35a0",
				"8764c7e3-1ac9-af5c-88e6-e7125b6522f8",
				"e5e58165-76a5-3c7f-d936-29d846924a3f"
			],
			"owner": "355839",
			"collectionId": "8bd4197d-482e-9ec7-b75d-63a4daea27f5"
		},
		{
			"id": "5ffee319-8526-d8ce-a125-978b4c0ff223",
			"name": "QAA-1134 : Accounts : parking",
			"description": "",
			"order": [
				"62757293-8840-2b05-ffa2-2f718ee23e29",
				"12ed00f0-0c55-8ac8-5554-c846498d5faf",
				"17977007-137f-3964-0655-0650981e92a0",
				"cc146922-b0c1-d5da-b04c-c37d5e3674fc",
				"3c19bc0e-b28c-33e4-d517-e828ebcf2cd0",
				"6240c3d4-381f-cd32-e6ec-f9db7da145eb",
				"bc88511f-8930-28f1-a34c-fdeb89e66aaf",
				"d9f5e075-ac3c-a788-5bd2-0e53f2ed33c6",
				"a5e90e5c-812d-d349-e2e7-e362be884cfe",
				"a2a0d4e6-8b91-d8e0-96a5-14905f5266e4"
			],
			"collectionId": "8bd4197d-482e-9ec7-b75d-63a4daea27f5"
		},
		{
			"id": "10f6bafc-ab24-69ea-75ff-80caa0ac6cf0",
			"name": "Staff Routes",
			"description": "",
			"order": [
				"b9a22d77-9e93-b92d-dc9f-18b1c7a626df",
				"08af280b-8821-7420-2bc8-d241cdc8e990",
				"1506f902-fb39-eea4-b094-fb285534bfaf",
				"9beaae84-55b2-31e1-7020-762b796ee6e0",
				"98505c78-722d-d5c2-fab3-67850d62386a",
				"a96f64a2-f10e-b818-0b22-493a1fa54a2c"
			],
			"owner": "355839",
			"collectionId": "8bd4197d-482e-9ec7-b75d-63a4daea27f5"
		}
	],
	"timestamp": 1467138969623,
	"owner": "355839",
	"public": false,
	"published": false,
	"requests": [
		{
			"id": "07d8a95e-7c8c-fac0-60c3-2ac69fb39cae",
			"headers": "Authorization: {{Authorization}}\n",
			"url": "{{HOST}}/v1/account/interests?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "var response = JSON.parse(responseBody);\n\ntests[\"Successful GET request\"] = responseCode.code === 200;\ntests[\"Response has data field\"] = responseBody.has(\"data\");\ntests[\"Response has no errors\"] = jQuery.isEmptyObject(response.errors);\ntests[\"Response has meta field\"] = responseBody.has(\"meta\");\n\ntests[\"Account is interested in '65'\"] = response.data.includes(\"65\");\ntests[\"Account is interested in '53'\"] = response.data.includes(\"53\");\ntests[\"Account is interested in '171'\"] = response.data.includes(\"171\");\ntests[\"Account is interested in '37'\"] = response.data.includes(\"37\");\ntests[\"Account is interested in '67'\"] = response.data.includes(\"67\");\ntests[\"Account is interested in '152'\"] = response.data.includes(\"152\");\ntests[\"Account is interested in '82'\"] = response.data.includes(\"82\");\ntests[\"Account is interested in '137'\"] = response.data.includes(\"137\");\ntests[\"Account is interested in '138'\"] = response.data.includes(\"138\");\ntests[\"Account is interested in '2'\"] = response.data.includes(\"2\");\ntests[\"Account is interested in '102'\"] = response.data.includes(\"102\");\ntests[\"Account is interested in '109'\"] = response.data.includes(\"109\");\ntests[\"Account is interested in '183'\"] = response.data.includes(\"183\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468448709394,
			"name": "Retrieve account interests.",
			"description": "Retrieve account interests. Requires authentication. Retrieving interest list for partial accounts is not supported.",
			"collectionId": "8bd4197d-482e-9ec7-b75d-63a4daea27f5",
			"responses": [],
			"folder": "2483beb5-79d1-b245-9929-36a9dcc1aff7"
		},
		{
			"id": "08af280b-8821-7420-2bc8-d241cdc8e990",
			"headers": "Authorization: {{staff_access_token}}\n",
			"url": "{{HOST}}/v1/staff?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "var response = JSON.parse(responseBody);\n\npostman.setEnvironmentVariable(\"staff_uuid\", response[0].uuid);\n\n//standard array of tests\ntests[\"Successful GET request\"] = responseCode.code === 200;\ntests[\"Response has data field\"] = responseBody.has(\"data\");\ntests[\"Response has errors field\"] = responseBody.has(\"errors\");\ntests[\"Response has no errors\"] = jQuery.isEmptyObject(response.errors);\ntests[\"Response has meta field\"] = responseBody.has(\"meta\");\n\n//case specific tests\ntests[\"id is populated\"] = response[0].id !== null;\ntests[\"uuid is populated\"] = response[0].uuid !== null;\ntests[\"okta_id is populated\"] = response[0].okta_id !== null;\ntests[\"first_name is populated\"] = response[0].first_name !== null;\ntests[\"last_name is populated\"] = response[0].last_name !== null;\ntests[\"email is populated\"] = response[0].email !== null;\ntests[\"country is populated\"] = response[0].country !== null;\ntests[\"confirmation_token is populated\"] = response[0].confirmation_token !== null;\ntests[\"response is populated\"] = response[0].confirmed_at !== null;\ntests[\"updated_at is populated\"] = response[0].updated_at !== null;\ntests[\"created_at is populated\"] = response[0].created_at !== null;\ntests[\"disabled_at is populated\"] = response[0].disabled_at !== null;\ntests[\"rolls is populated\"] = response[0].rolls !== null;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1469055616825,
			"name": "Staff with access to Westfield APIs",
			"description": "Returns a list of staff limited to 100 enabled staff by default",
			"collectionId": "8bd4197d-482e-9ec7-b75d-63a4daea27f5",
			"responses": []
		},
		{
			"id": "11c58310-b5c3-8fd8-10d1-8761b64ecec2",
			"headers": "",
			"url": "{{HOST}}/v1/account/status?country=UK&email={{email}}&api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "var response = JSON.parse(responseBody);\n\n//standard array of tests\ntests[\"Successful GET request\"] = responseCode.code === 200;\ntests[\"Response has data field\"] = responseBody.has(\"data\");\ntests[\"Response has no errors\"] = jQuery.isEmptyObject(response.errors);\ntests[\"Response has meta field\"] = responseBody.has(\"meta\");\n\n\n//endpoint specific tests\ntests[\"Account is full\"] = response.data === \"full\";",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468447763311,
			"name": "Retrieve account status",
			"description": "Return the status of account, which can be: [\"full\", \"partial\", \"none\", \"deleted\", \"locked\"].",
			"collectionId": "8bd4197d-482e-9ec7-b75d-63a4daea27f5",
			"responses": [],
			"folder": "f4a3efc7-b4cf-8ce9-73dc-174cea88fcd8"
		},
		{
			"id": "12ed00f0-0c55-8ac8-5554-c846498d5faf",
			"headers": "Content-Type: application/json\n",
			"url": "{{HOST}}/v1/people/oauth/token?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "var response = JSON.parse(responseBody);\n\n//endpoint specific elements\npostman.setEnvironmentVariable('Authorization','bearer '.concat(response.access_token));\n\n//standard array of tests\ntests[\"Successful POST request\"] = responseCode.code === 200;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468447168744,
			"name": "Create user OAuth token.",
			"description": "Generates a token that is needed to manage the user profile",
			"collectionId": "8bd4197d-482e-9ec7-b75d-63a4daea27f5",
			"responses": [],
			"folder": "5ffee319-8526-d8ce-a125-978b4c0ff223",
			"rawModeData": "{\n  \"grant_type\": \"password\",\n  \"username\": \"{{email}}\",\n  \"password\": \"{{password}}\",\n  \"country\": \"UK\"\n}"
		},
		{
			"id": "14b1e700-afac-145f-48b2-c3f89c66e759",
			"headers": "Authorization: {{staff_access_token}}\n",
			"url": "{{HOST}}/v1/people/{{person_id}}/food/orders/{{food_order_id}}/receipt?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Successful POST request\"] = responseCode.code === 204;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1469047585111,
			"name": "Send food order receipt email.",
			"description": "Request to send food order receipt email.",
			"collectionId": "8bd4197d-482e-9ec7-b75d-63a4daea27f5",
			"responses": []
		},
		{
			"id": "1506f902-fb39-eea4-b094-fb285534bfaf",
			"headers": "Content-Type: application/json\nAuthorization: {{staff_access_token}}\n",
			"url": "{{HOST}}/v1/staff?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "var response = JSON.parse(responseBody);\n\npostman.setEnvironmentVariable(\"staff_uuid\", response[0].uuid);\n\n//standard array of tests\ntests[\"Successful GET request\"] = responseCode.code === 200;\ntests[\"Response has data field\"] = responseBody.has(\"data\");\ntests[\"Response has errors field\"] = responseBody.has(\"errors\");\ntests[\"Response has no errors\"] = jQuery.isEmptyObject(response.errors);\ntests[\"Response has meta field\"] = responseBody.has(\"meta\");\n\n//case specific tests\n// tests[\"id is populated\"] = response[0].id !== null;\n// tests[\"uuid is populated\"] = response[0].uuid !== null;\n// tests[\"okta_id is populated\"] = response[0].okta_id !== null;\n// tests[\"first_name is populated\"] = response[0].first_name !== null;\n// tests[\"last_name is populated\"] = response[0].last_name !== null;\n// tests[\"email is populated\"] = response[0].email !== null;\n// tests[\"country is populated\"] = response[0].country !== null;\n// tests[\"confirmation_token is populated\"] = response[0].confirmation_token !== null;\n// tests[\"response is populated\"] = response[0].confirmed_at !== null;\n// tests[\"updated_at is populated\"] = response[0].updated_at !== null;\n// tests[\"created_at is populated\"] = response[0].created_at !== null;\n// tests[\"disabled_at is populated\"] = response[0].disabled_at !== null;\n// tests[\"rolls is populated\"] = response[0].rolls !== null;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1469462001216,
			"name": "Create new staff.",
			"description": "",
			"collectionId": "8bd4197d-482e-9ec7-b75d-63a4daea27f5",
			"responses": [],
			"rawModeData": "{\n  \"first_name\": \"Automation Test\",\n  \"last_name\": \"Staff\",\n  \"country\": \"AU\",\n  \"email\": \"westqa01@gmail.com\",\n  \"metadata\": {}\n}"
		},
		{
			"id": "16a5ea57-819c-9980-18a8-b26bf2c28c71",
			"headers": "Authorization: {{Authorization}}\nContent-Type: application/json\n",
			"url": "{{HOST}}/v1/account/credit_cards?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "var response = JSON.parse(responseBody);\n\n//standard array of tests\ntests[\"Successful POST request\"] = responseCode.code === 201;\ntests[\"Response has data field\"] = responseBody.has(\"data\");\ntests[\"Response has no errors\"] = jQuery.isEmptyObject(response.errors);\ntests[\"Response has meta field\"] = responseBody.has(\"meta\");\n\n\n//case specific tests\ntests[\"card_type is true\"] = response.data.card_type === \"visa\";\ntests[\"first_name returns correctly\"] = response.data.first_name === \"Johnny\";\ntests[\"last_name returns correctly\"] = response.data.last_name === \"Lyonhart: Secret Agent\";\ntests[\"first_six_digits returns correctly\"] = response.data.first_six_digits === \"411111\";\ntests[\"last_four_digits returns correctly\"] = response.data.last_four_digits === \"1111\";\ntests[\"month returns correctly\"] = response.data.month === 8;\ntests[\"year returns correctly\"] = response.data.year === 2019;\ntests[\"payment_method_token returns correctly\"] = response.data.payment_method_token === environment.p_m_t;\ntests[\"postal_code returns correctly\"] = response.data.postal_code === \"17377\";\ntests[\"parking_card returns correctly\"] = response.data.parking_card === false;\n\n\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468954993740,
			"name": "Add a credit card to a user account.",
			"description": "Request adding a credit card to a user account from JSON data in the request body.",
			"collectionId": "8bd4197d-482e-9ec7-b75d-63a4daea27f5",
			"responses": [],
			"rawModeData": "{\n  \"payment_method_token\": \"{{payment_method_token}}\"\n}"
		},
		{
			"id": "17373989-3541-b7c2-1002-9f6a7ff39845",
			"headers": "Content-Type: application/json\n",
			"url": "{{HOST}}/v1/account/kids?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Successfully POST kids\"] = responseCode.code === 200;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1467051952076,
			"name": "Add new kids to account.",
			"description": "Add new kids to account.",
			"collectionId": "8bd4197d-482e-9ec7-b75d-63a4daea27f5",
			"responses": [],
			"folder": "097d7cf5-b1e2-5d7c-4438-b9c896b42c74",
			"rawModeData": "{\n  \"email\": \"{{email}}\",\n  \"country\": \"UK\",\n  \"kids\": [\n    {\n      \"first_name\": \"one\",\n      \"birth_date\": \"2016-06-22\",\n      \"gender\": \"m\"\n    },\n    {\n      \"first_name\": \"two\",\n      \"birth_date\": \"2016-06-22\",\n      \"gender\": \"m\"\n    },\n    {\n      \"first_name\": \"three\",\n      \"birth_date\": \"2016-06-22\",\n      \"gender\": \"m\"\n    },\n    {\n      \"first_name\": \"four\",\n      \"birth_date\": \"2016-06-22\",\n      \"gender\": \"m\"\n    },\n    {\n      \"first_name\": \"five\",\n      \"birth_date\": \"2016-06-22\",\n      \"gender\": \"m\"\n    },\n    {\n      \"first_name\": \"six\",\n      \"birth_date\": \"2016-06-22\",\n      \"gender\": \"m\"\n    },\n    {\n      \"first_name\": \"seven\",\n      \"birth_date\": \"2016-06-22\",\n      \"gender\": \"m\"\n    },\n    {\n      \"first_name\": \"eight\",\n      \"birth_date\": \"2016-06-22\",\n      \"gender\": \"m\"\n    },\n    {\n      \"first_name\": \"nine\",\n      \"birth_date\": \"2016-06-22\",\n      \"gender\": \"m\"\n    }\n  ]\n}"
		},
		{
			"id": "17977007-137f-3964-0655-0650981e92a0",
			"headers": "Authorization: {{Authorization}}\n",
			"url": "{{HOST}}/v1/account/parking/signup?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Successful POST to signup for parking\"] = responseCode.code === 200;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468446903209,
			"name": "Signup a user to parking service.",
			"description": "Request to signup a user account to parking service.",
			"collectionId": "8bd4197d-482e-9ec7-b75d-63a4daea27f5",
			"responses": [],
			"folder": "5ffee319-8526-d8ce-a125-978b4c0ff223"
		},
		{
			"id": "20063235-b391-7af9-ef36-9b816b6cf4c4",
			"headers": "Authorization: {{staff_access_token}}\n",
			"url": "{{HOST}}/v1/people?query=food&owner_id=WF&page=1&per_page=25&api_key={{api_key}}&fields=corporate_owner,created_at,creation_source,email,email_marketing_opt_in,first_name,gender,last_name,messaging_preferences,newsletter_centre_ids,newsletter_subscriptions,person_id,phone_number,primary_centre_country,primary_centre_id,registered_for_parking,sms_marketing_opt_in,timezone,updated_at,wifi_id",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "var response = JSON.parse(responseBody);\nvar person_one = response.data[0];\n\n//set environment variables\npostman.setEnvironmentVariable('person_id',person_one.person_id);\n\n\n//standard array of tests\ntests[\"Successful GET request\"] = responseCode.code === 200;\ntests[\"Response has data field\"] = responseBody.has(\"data\");\ntests[\"Response has no errors\"] = jQuery.isEmptyObject(response.errors);\ntests[\"Response has meta field\"] = responseBody.has(\"meta\");\n\n//case specific tests\ntests[\"created_at is populated\"] = person_one.created_at !== null;\ntests[\"email is populated\"] = person_one.email !== null;\ntests[\"email_marketing_opt_in is populated\"] = person_one.email_marketing_opt_in !== null;\ntests[\"first_name is populated\"] = person_one.first_name !== null;\ntests[\"last_name is populated\"] = person_one.last_name !== null;\ntests[\"messaging_preferences is populated\"] = person_one.messaging_preferences !== null;\ntests[\"newsletter_centre_ids is populated\"] = person_one.newsletter_centre_ids !== null;\ntests[\"newsletter_subscriptions is populated\"] = person_one.newsletter_subscriptions !== null;\ntests[\"person_id is populated\"] = person_one.person_id !== null;\ntests[\"phone_number is populated\"] = person_one.phone_number !== null;\ntests[\"primary_centre_id is populated\"] = person_one.primary_centre_id !== null;\ntests[\"registered_for_parking is populated\"] = person_one.registered_for_parking !== null;\ntests[\"sms_marketing_opt_in is populated\"] = person_one.sms_marketing_opt_in !== null;\ntests[\"updated_at is populated\"] = person_one.updated_at !== null;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1469037261871,
			"name": "Retrieve accounts",
			"description": "",
			"collectionId": "8bd4197d-482e-9ec7-b75d-63a4daea27f5",
			"responses": []
		},
		{
			"id": "2122a71b-38b7-969b-2834-a7c78c913a76",
			"headers": "Authorization: {{staff_access_token}}\n",
			"url": "{{HOST}}/v1/people/{{person_id}}/kids?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "var response = JSON.parse(responseBody);\n\n//standard array of tests\ntests[\"Successful GET request\"] = responseCode.code === 200;\ntests[\"Response has data field\"] = responseBody.has(\"data\");\ntests[\"Response has no errors\"] = jQuery.isEmptyObject(response.errors);\ntests[\"Response has meta field\"] = responseBody.has(\"meta\");\n\n//case specific tests\nnames = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"];\n\nfor (i=0; i<=8; i++){\n  tests[\"Kid names are correct\"] = response.data[i].first_name === names[i];\n  tests[\"Kid genders are correct\"] = response.data[i].gender === \"m\";\n  tests[\"Kid birth_dates are correct\"] = response.data[i].birth_date === \"2016-06-22\";\n}",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468444344401,
			"name": "Retrieve kids in account.",
			"description": "Retrieve kids in account for the given person_id. Requires staff authentication.",
			"collectionId": "8bd4197d-482e-9ec7-b75d-63a4daea27f5",
			"responses": [],
			"folder": "097d7cf5-b1e2-5d7c-4438-b9c896b42c74"
		},
		{
			"id": "23add68a-f51c-350d-9d05-e4be68d6cee2",
			"headers": "Content-Type: application/json\n",
			"url": "{{HOST}}/v1/account/interests?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "postman.setEnvironmentVariable(\"email\", \"devnull_interest_user_1466807318@dbg.westfield.com\");\ntests[\"Status code is 200\"] = responseCode.code === 200;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468448640450,
			"name": "Add new interests to account.",
			"description": "Add new interests to account.",
			"collectionId": "8bd4197d-482e-9ec7-b75d-63a4daea27f5",
			"responses": [],
			"folder": "2483beb5-79d1-b245-9929-36a9dcc1aff7",
			"rawModeData": "{\n  \"email\": \"{{email}}\",\n  \"country\": \"UK\",\n  \"interest_ids\": [\n    65, 53, 171, 37, 67, 152, 82, 137, 138, 2, 102, 109, 183\n  ],\n  \"interests_updated_from\": \"android\"\n}"
		},
		{
			"id": "2605b94b-2aaf-642c-1ea6-aae387f86b93",
			"headers": "Authorization: {{Authorization}}\nContent-Type: application/json\n",
			"url": "{{HOST}}/v1/account/interests?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "PUT",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1466807859648,
			"name": "Replace account interests with new interests.",
			"description": "Replace account interests. Requires authentication. Replacing interest list for partial accounts is not supported.",
			"collectionId": "8bd4197d-482e-9ec7-b75d-63a4daea27f5",
			"responses": [],
			"folder": "2483beb5-79d1-b245-9929-36a9dcc1aff7",
			"rawModeData": "{\n  \"interest_ids\": [\n    \"home\"\n  ],\n  \"interests_updated_from\": \"android\"\n}"
		},
		{
			"id": "36bf825f-ffa1-09fa-1883-3ba6898c9ad6",
			"headers": "Authorization: {{staff_access_token}}\n",
			"url": "{{HOST}}/v1/people/{{person_id}}/food/orders/{{food_order_id}}?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "var response = JSON.parse(responseBody);\n\n//set environment variables\n//standard array of tests\ntests[\"Successful GET request\"] = responseCode.code === 200;\ntests[\"Response has data field\"] = responseBody.has(\"data\");\ntests[\"Response has no errors\"] = jQuery.isEmptyObject(response.errors);\ntests[\"Response has meta field\"] = responseBody.has(\"meta\");\n\n//case specific tests\ntests[\"created_at is populated\"] = response.data.created_at !== null;\ntests[\"food_order_id is populated\"] = response.data.food_order_id !== null;\ntests[\"restaurant field is populated\"] = response.data.restaurant !== null;\ntests[\"credit_card is populated\"] = response.restaurant !== null;\ntests[\"credit_card is populated with correct information\"] = response.data.credit_card.payment_method_token === environment.payment_method_token; //WTF? Why This Failing?\ntests[\"total_amount is populated\"] = response.data.total_amount !== null;\ntests[\"status is populated\"] = response.data.status !== null; // 'Picked Up'\n\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1469052092033,
			"name": "Retrieve food order by id.",
			"description": "Request to retrieve food order.",
			"collectionId": "8bd4197d-482e-9ec7-b75d-63a4daea27f5",
			"responses": []
		},
		{
			"id": "3c19bc0e-b28c-33e4-d517-e828ebcf2cd0",
			"headers": "Authorization: {{Authorization}}\nContent-Type: application/json\n",
			"url": "{{HOST}}/v1/account/vehicles/{{license_plate}}?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "PATCH",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Successful POST request\"] = responseCode.code === 204;\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468447043539,
			"name": "Update a vehicle.",
			"description": "Request update of a vehicle from JSON data in request body.",
			"collectionId": "8bd4197d-482e-9ec7-b75d-63a4daea27f5",
			"responses": [],
			"folder": "5ffee319-8526-d8ce-a125-978b4c0ff223",
			"rawModeData": "{\n  \"name\": \"patched car\"\n}"
		},
		{
			"id": "40f1e866-d1b1-bffd-e666-18a5f449f425",
			"headers": "Content-Type: application/json\n",
			"url": "{{HOST}}/v1/people/oauth/token?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "//endpoint specific elements\nvar response = JSON.parse(responseBody);\npostman.setEnvironmentVariable('Authorization','bearer '.concat(response.access_token));\n\n//standard array of tests\ntests[\"Successful POST request\"] = responseCode.code === 200;\ntests[\"Response has no errors\"] = jQuery.isEmptyObject(response.errors);\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468443665858,
			"name": "Create OAuth token. ",
			"description": "Generates a token that is needed to manage the user profile",
			"collectionId": "8bd4197d-482e-9ec7-b75d-63a4daea27f5",
			"responses": [],
			"folder": "f4a3efc7-b4cf-8ce9-73dc-174cea88fcd8",
			"rawModeData": "{\n  \"grant_type\": \"password\",\n  \"username\": \"{{email}}\",\n  \"password\": \"{{password}}\",\n  \"country\": \"UK\",\n  \"refresh_token\": \"string\"\n}"
		},
		{
			"id": "4c9e4dde-3e78-bcfc-2d77-47205c42c3ed",
			"headers": "Content-Type: application/json\n",
			"url": "{{HOST}}/v1/staff/token?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "postman.setEnvironmentVariable(\"email\", \"devnull_kid_user_1467048065@dbg.westfield.com\");\npostman.setEnvironmentVariable(\"person_id\", \"WF-fdc4229fac9648dca037a49102643740\");\n\n\nvar response = JSON.parse(responseBody);\n\npostman.setEnvironmentVariable(\"staff_access_token\", \"bearer \" + response.access_token);\n\ntests[\"Successfully POST staff access token\"] = responseCode.code === 200;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468444368480,
			"name": "Create staff OAuth token.",
			"description": "If you send the grant type `client_credentials` you must also provide the `client_id` and `client_secret`. If you send the grant type `password` you must also provide the `username` and `password`; you may optionally provide `client_id` and `client_secret`. If you send the grant type as `authorization_code`, you must provide the `client_id` and `client_secret` along with the `code` and `redirect_uri`.",
			"collectionId": "8bd4197d-482e-9ec7-b75d-63a4daea27f5",
			"responses": [],
			"folder": "097d7cf5-b1e2-5d7c-4438-b9c896b42c74",
			"rawModeData": "{\n  \"grant_type\": \"password\",\n  \"client_id\": \"{{client_id}}\",\n  \"client_secret\": \"{{client_secret}}\",\n  \"username\": \"{{staff_username}}\",\n  \"password\": \"{{staff_password}}\"\n}"
		},
		{
			"id": "5755ea51-ecd4-fb8e-2c2b-01af9f59ceb4",
			"headers": "Authorization: {{staff_access_token}}\nContent-Type: application/json\n",
			"url": "{{HOST}}/v1/people/{{person_id}}/kids?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "PUT",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "var response = JSON.parse(responseBody);\n\ntests[\"Successful GET request\"] = responseCode.code === 200;\ntests[\"Response has data field\"] = responseBody.has(\"data\");\ntests[\"Response has no errors\"] = jQuery.isEmptyObject(response.errors);\ntests[\"Response has meta field\"] = responseBody.has(\"meta\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468444391903,
			"name": "Replace kids in account.",
			"description": "Replace kids in account for the given person_id. Requires staff authentication.",
			"collectionId": "8bd4197d-482e-9ec7-b75d-63a4daea27f5",
			"responses": [],
			"folder": "097d7cf5-b1e2-5d7c-4438-b9c896b42c74",
			"rawModeData": "{\n  \"kids\": []\n}"
		},
		{
			"id": "57c0435a-a4d0-c3e7-8499-05a3228534b3",
			"headers": "Content-Type: application/json\n",
			"url": "{{HOST}}/v1/people/oauth/token?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "//endpoint specific elements\nvar response = JSON.parse(responseBody);\npostman.setEnvironmentVariable(\"email\", \"devnull_credit_cards_user_1466811097@dbg.westfield.com\");\npostman.setEnvironmentVariable('Authorization','bearer '.concat(response.access_token));\n\n//standard array of tests\ntests[\"Successful POST request\"] = responseCode.code === 200;\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468443792362,
			"name": "Create user OAuth token.",
			"description": "Generates a token that is needed to manage the user profile",
			"collectionId": "8bd4197d-482e-9ec7-b75d-63a4daea27f5",
			"responses": [],
			"folder": "cdeff92f-24d9-6fcc-dbcb-11fb9852e42e",
			"rawModeData": "{\n  \"grant_type\": \"password\",\n  \"username\": \"{{email}}\",\n  \"password\": \"{{password}}\",\n  \"country\": \"{{country}}\"\n}"
		},
		{
			"id": "58322127-57cc-d2f9-6cdd-6f6d995b01ff",
			"headers": "Content-Type: application/json\n",
			"url": "{{HOST}}/v1/staff/token?api_key=BEPH3JFgNsYetXCBx6tOdHGJzA6rwjgY",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "var response = JSON.parse(responseBody);\n\npostman.setEnvironmentVariable(\"staff_access_token\", \"bearer \" + response.access_token);\n\ntests[\"Successful POST request\"] = responseCode.code === 200;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1469037131910,
			"name": "Create staff OAuth token.",
			"description": "If you send the grant type `client_credentials` you must also provide the `client_id` and `client_secret`. If you send the grant type `password` you must also provide the `username` and `password`; you may optionally provide `client_id` and `client_secret`. If you send the grant type as `authorization_code`, you must provide the `client_id` and `client_secret` along with the `code` and `redirect_uri`.",
			"collectionId": "8bd4197d-482e-9ec7-b75d-63a4daea27f5",
			"responses": [],
			"rawModeData": "{\n  \"grant_type\":\"password\",\n  \"username\":\"labswes+1@gmail.com\",\n  \"password\":\"conciergEtest1\",\n  \"client_id\":\"14c10708dce450ec8970c94b38934248470ce5c2af142494c0eb9a04ccc181b0\",\n  \"client_secret\": \"e60c6ba435d3ad67b7596b907f1f03f2761dc58815cfe0a017cd70054f8a8d22\",\n  \"scopes\": \"parkiq\"\n}"
		},
		{
			"id": "6240c3d4-381f-cd32-e6ec-f9db7da145eb",
			"headers": "Authorization: {{Authorization}}\n",
			"url": "{{HOST}}/v1/account/vehicles/{{license_plate}}?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Successful DELETE request\"] = responseCode.code === 204;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468446954528,
			"name": "Delete a vehicle.",
			"description": "Request deletion of a vehicle.",
			"collectionId": "8bd4197d-482e-9ec7-b75d-63a4daea27f5",
			"responses": [],
			"folder": "5ffee319-8526-d8ce-a125-978b4c0ff223"
		},
		{
			"id": "62757293-8840-2b05-ffa2-2f718ee23e29",
			"headers": "Content-Type: application/json\n",
			"url": "{{HOST}}/v1/account?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "var response = JSON.parse(responseBody);\n\ntests[\"Successful POST request\"] = responseCode.code === 201;\ntests[\"Response has data field\"] = responseBody.has(\"data\");\ntests[\"Response has no errors\"] = jQuery.isEmptyObject(response.errors);\ntests[\"Response has meta field\"] = responseBody.has(\"meta\");\n\n//set environment variables\npostman.setEnvironmentVariable('email',response.data.email);\npostman.setEnvironmentVariable('person_id',response.data.person_id);\n\n\n//standard array of tests\ntests[\"Successful POST request\"] = responseCode.code === 201;\ntests[\"Response has data field\"] = responseBody.has(\"data\");\ntests[\"Response has no errors\"] = jQuery.isEmptyObject(response.errors);\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468446873453,
			"name": "Create a person account.",
			"description": "Create a person account.",
			"collectionId": "8bd4197d-482e-9ec7-b75d-63a4daea27f5",
			"responses": [],
			"folder": "5ffee319-8526-d8ce-a125-978b4c0ff223",
			"rawModeData": "{\n  \"creation_source\": \"newsletter\",\n  \"email\": \"devNull_parking_user_{{$timestamp}}@dbg.westfield.com\",\n  \"email_marketing_opt_in\": true,\n  \"first_name\": \"Test\",\n  \"gender\": \"female\",\n  \"password\": \"{{password}}\",\n  \"last_name\": \"User_{{$timestamp}}\",\n  \"newsletter_subscriptions\": [],\n  \"primary_centre_id\": \"london\"\n}"
		},
		{
			"id": "65891a56-f0e3-9ac8-7435-975b0b12d760",
			"headers": "Authorization: {{Authorization}}\n",
			"url": "{{HOST}}/v1/account?country=UK&email={{email}}&person_id={{person_id}}&api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "var response = JSON.parse(responseBody);\n\n//standard array of tests\ntests[\"Successful GET request\"] = responseCode.code === 200;\ntests[\"Response has data field\"] = responseBody.has(\"data\");\ntests[\"Response has no errors\"] = jQuery.isEmptyObject(response.errors);\ntests[\"Response has meta field\"] = responseBody.has(\"meta\");\n\n\n//case specific tests\n\ntests[\"email address returns correctly\"] = response.data.email === environment.email;\ntests[\"person_id returns correctly\"] = response.data.person_id === environment.person_id;\n\ntests[\"email_marketing_opt_in is true\"] = response.data.email_marketing_opt_in === true;\ntests[\"first_name returns correctly\"] = response.data.first_name === \"Patch\";\ntests[\"last_name returns correctly\"] = response.data.last_name.substring(0,9) === \"Lyonhart_\";\n\nfor (var key in response.data.messaging_preferences.food){\n  tests[\"messaging_preferences[food] are all false\"] = response.data.messaging_preferences.food[key] === true\n}\nfor (var key in response.data.messaging_preferences.parking){\n  tests[\"messaging_preferences[parking] are all false\"] = response.data.messaging_preferences.parking[key] === true;\n}\n\ntests[\"london added to newsletter_centre_ids\"] = response.data.newsletter_centre_ids.includes(\"london\");\ntests[\"newsletter_subscriptions return the correct quantity\"] = response.data.newsletter_centre_ids.length === 1;\n\ntests[\"london_general subscribed to\"] = response.data.newsletter_subscriptions.includes(\"london_general\");\ntests[\"newsletter_subscriptions return the correct quantity\"] = response.data.newsletter_subscriptions.length === 1;\n\ntests[\"phone_number returns correctly\"] = response.data.phone_number === \"445551000000\";\ntests[\"primary_centre_id returns correctly\"] = response.data.primary_centre_id === \"london\";\n\ntests[\"sms_marketing_opt_in returns correctly\"] = response.data.sms_marketing_opt_in === true;\n\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468447716264,
			"name": "Retrieve updated full account.",
			"description": "There are 3 possible ways to specify which account data should be returned. 1) Providing an access token, that will return all data related to the account associated to the token (only works with full accounts). 2) Providing an email address and a country, this way it will return the account details that holds that email for the provided country database (only works with partial accounts). 3) Providing a person_id, this way it will return the account associated with that identifier (only works with partial accounts).",
			"collectionId": "8bd4197d-482e-9ec7-b75d-63a4daea27f5",
			"responses": [],
			"folder": "f4a3efc7-b4cf-8ce9-73dc-174cea88fcd8"
		},
		{
			"id": "74d172f2-b01f-46f1-9202-5c60196b4764",
			"headers": "Content-Type: application/json\n",
			"url": "{{HOST}}/v1/account/newsletters/subscribe?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "\nvar response = JSON.parse(responseBody);\n\n//set environment variables\npostman.setEnvironmentVariable(\"email\", \"devnull_newsletter_user_1466803990@dbg.westfield.com\");\npostman.setEnvironmentVariable(\"person_id\", \"WF-6da7aa5e8f994d48be34fd7ab67db38d\");\n\n//standard array of tests\ntests[\"Successful GET request\"] = responseCode.code === 200;\ntests[\"Response has data field\"] = responseBody.has(\"data\");\ntests[\"Response has no errors\"] = jQuery.isEmptyObject(response.errors);\ntests[\"Response has meta field\"] = responseBody.has(\"meta\");\n\n//case specific tests\ntests[\"london added to newsletter_centre_ids\"] = response.data.newsletter_centre_ids.includes(\"london\");\ntests[\"stratfordcity added to newsletter_centre_ids\"] = response.data.newsletter_centre_ids.includes(\"stratfordcity\");\n\ntests[\"london_general subscribed to\"] = response.data.newsletter_subscriptions.includes(\"london_general\");\ntests[\"stratfordcity_general subscribed to\"] = response.data.newsletter_subscriptions.includes(\"stratfordcity_general\");\ntests[\"newsletter_subscriptions return the correct quantity\"] = response.data.newsletter_subscriptions.length === 2;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468965190917,
			"name": "Subscribe to newsletters",
			"description": "Request creation of newsletter subscriptions for account.",
			"collectionId": "8bd4197d-482e-9ec7-b75d-63a4daea27f5",
			"responses": [],
			"rawModeData": "{\n  \"country\": \"UK\",\n  \"email\": \"{{email}}\",\n  \"first_name\": \"John\",\n  \"newsletter_subscriptions\": [\n    \"london_general\", \"stratfordcity_general\"\n  ],\n  \"primary_centre_id\": \"london\"\n}"
		},
		{
			"id": "762a5c31-2390-c13d-bffe-284d93e808c6",
			"headers": "Content-Type: application/json\n",
			"url": "{{HOST}}/v1/account/upgrade?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "/*\n**\n**    Happy Path\n**\n*/\n\ntests[\"Successful POST request\"] = responseCode.code === 204;\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1466800704874,
			"name": "Upgrade a partial account to a full account",
			"description": "Upgrade a partial account to a full account. Needs either a person_id, or an email and country to identify the account to be upgraded.",
			"collectionId": "8bd4197d-482e-9ec7-b75d-63a4daea27f5",
			"responses": [],
			"folder": "f4a3efc7-b4cf-8ce9-73dc-174cea88fcd8",
			"rawModeData": "{\n  \"person_id\": \"{{person_id}}\",\n  \"first_name\": \"Jeremy\",\n  \"last_name\": \"Jones\",\n  \"password\": \"{{password}}\"\n}"
		},
		{
			"id": "780d85ad-b990-6d17-126a-b4050df772fc",
			"headers": "",
			"url": "http://fake-response.appspot.com/?sleep=2",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": null,
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468954466081,
			"name": "sleep 2 seconds",
			"description": "",
			"collectionId": "8bd4197d-482e-9ec7-b75d-63a4daea27f5",
			"responses": []
		},
		{
			"id": "7b58131a-731b-dcdb-e7c4-6afa932f35a0",
			"headers": "",
			"url": "{{HOST}}/v1/account/newsletters?api_key={{api_key}}&person_id={{person_id}}&country={{country}}&email={{email}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "var response = JSON.parse(responseBody);\n\n//standard array of tests\ntests[\"Successful GET request\"] = responseCode.code === 200;\ntests[\"Response has data field\"] = responseBody.has(\"data\");\ntests[\"Response has no errors\"] = jQuery.isEmptyObject(response.errors);\ntests[\"Response has meta field\"] = responseBody.has(\"meta\");\n\n//case specific tests\ntests[\"london added to newsletter_centre_ids\"] = response.data.newsletter_centre_ids.includes(\"london\");\ntests[\"stratfordcity added to newsletter_centre_ids\"] = response.data.newsletter_centre_ids.includes(\"stratfordcity\");\n\ntests[\"london_general subscribed to\"] = response.data.newsletter_subscriptions.includes(\"london_general\");\ntests[\"stratfordcity_general subscribed to\"] = response.data.newsletter_subscriptions.includes(\"stratfordcity_general\");\ntests[\"newsletter_subscriptions return the correct quantity\"] = response.data.newsletter_subscriptions.length === 2;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468965199973,
			"name": "Get newsletter subscriptions for the account",
			"description": "Request to get the newsletter subscriptions for the account. Full accounts require a token to access, partial accounts do not.",
			"collectionId": "8bd4197d-482e-9ec7-b75d-63a4daea27f5",
			"responses": []
		},
		{
			"id": "84053bbb-f0ac-8256-c72a-33e7ae0d65dd",
			"headers": "Authorization: {{Authorization}}\nContent-Type: application/json\n",
			"url": "{{HOST}}/v1/account/credit_cards/{{payment_method_token}}?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "PATCH",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Successful PATCH request\"] = responseCode.code === 204;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468954604609,
			"name": "Update a user credit card.",
			"description": "Request update of a credit card from JSON data in the request body.",
			"collectionId": "8bd4197d-482e-9ec7-b75d-63a4daea27f5",
			"responses": [],
			"rawModeData": "{\n  \"first_name\": \"Patched\",\n  \"last_name\": \"Lyonhart\",\n  \"month\": 10,\n  \"parking_card\": true,\n  \"postal_code\": \"11111\",\n  \"year\": 2018\n}"
		},
		{
			"id": "8764c7e3-1ac9-af5c-88e6-e7125b6522f8",
			"headers": "Content-Type: application/json\n",
			"url": "{{HOST}}/v1/account/newsletters/subscribe?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "PATCH",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "/*\n**\n**    Happy Path\n**\n*/\n\nvar response = JSON.parse(responseBody);\n\n//standard array of tests\ntests[\"Successful GET request\"] = responseCode.code === 200;\ntests[\"Response has data field\"] = responseBody.has(\"data\");\ntests[\"Response has no errors\"] = jQuery.isEmptyObject(response.errors);\ntests[\"Response has meta field\"] = responseBody.has(\"meta\");\n\n//case specific tests\ntests[\"london added to newsletter_centre_ids\"] = response.data.newsletter_centre_ids.length === 0;\ntests[\"newsletter_subscriptions return the correct quantity\"] = response.data.newsletter_subscriptions.length === 0;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468446820518,
			"name": "Update newsletter details for the account.",
			"description": "Request update of newsletter subscriptions and email_marketing_opt_in for account.",
			"collectionId": "8bd4197d-482e-9ec7-b75d-63a4daea27f5",
			"responses": [],
			"folder": "19672a79-5cfb-a189-f872-196cb8c2765a",
			"rawModeData": "{\n  \"country\": \"UK\",\n  \"email\": \"{{email}}\",\n  \"email_marketing_opt_in\": true,\n  \"newsletter_access_token\": \"{{newsletter_access_token}}\",\n  \"newsletter_subscriptions\": [],\n  \"person_id\": \"{{person_id}}\"\n}"
		},
		{
			"id": "895f33d4-62e3-9dcc-b0dc-51f14c3699bf",
			"headers": "Content-Type: application/json\n",
			"url": "{{HOST}}/v1/account?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "var response = JSON.parse(responseBody);\n\n//set environment variables\npostman.setEnvironmentVariable('email',response.data.email);\npostman.setEnvironmentVariable('person_id',response.data.person_id);\n\n//standard array of tests\ntests[\"Successful POST request\"] = responseCode.code === 201;\ntests[\"Response has data field\"] = responseBody.has(\"data\");\ntests[\"Response has no errors\"] = jQuery.isEmptyObject(response.errors);\ntests[\"Response has meta field\"] = responseBody.has(\"meta\");\n\n//case specific tests\ntests[\"email address returns correctly\"] = response.data.email === environment.email;\ntests[\"person_id returns correctly\"] = response.data.person_id === environment.person_id;\n\ntests[\"email_marketing_opt_in is true\"] = response.data.email_marketing_opt_in === true;\ntests[\"first_name returns correctly\"] = response.data.first_name === \"Eli\";\ntests[\"last_name returns correctly\"] = response.data.last_name === null;\n\ntests[\"london added to newsletter_centre_ids\"] = response.data.newsletter_centre_ids.includes(\"london\");\ntests[\"stratfordcity added to newsletter_centre_ids\"] = response.data.newsletter_centre_ids.includes(\"stratfordcity\");\n\ntests[\"london_general subscribed to\"] = response.data.newsletter_subscriptions.includes(\"london_general\");\ntests[\"stratfordcity_general subscribed to\"] = response.data.newsletter_subscriptions.includes(\"stratfordcity_general\");\ntests[\"newsletter_subscriptions return the correct quantity\"] = response.data.newsletter_subscriptions.length === 2;\n\ntests[\"primary_centre_id returns correctly\"] = response.data.primary_centre_id === \"london\";\n\ntests[\"sms_marketing_opt_in returns correctly\"] = response.data.sms_marketing_opt_in === false;\n\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468965527763,
			"name": "POST /account (partial) - Happy Path",
			"description": "Create a person account.",
			"collectionId": "8bd4197d-482e-9ec7-b75d-63a4daea27f5",
			"responses": [],
			"rawModeData": "{\n  \"creation_source\": \"newsletter\",\n  \"email\": \"devNull_partial_account_test_{{$timestamp}}@dbg.westfield.com\",\n  \"email_marketing_opt_in\": true,\n  \"first_name\": \"Eli\",\n  \"gender\": \"female\",\n  \"newsletter_subscriptions\": [\"london_general\", \"stratfordcity_general\"],\n  \"primary_centre_id\": \"london\"\n}"
		},
		{
			"id": "93272a65-fde2-eec5-bc7e-b3d470f32be3",
			"headers": "Content-Type: application/json\nAuthorization: {{Authorization}}\n",
			"url": "{{HOST}}/v1/account?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "PATCH",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 204\"] = responseCode.code === 204;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1466800477499,
			"name": "Update a person account.",
			"description": "There are 3 possible ways to specify which account should be updated. 1) Providing an access token, that will return update the account associated to the token (only works with full accounts). 2) Providing an email address and a country, this way it will update the account that holds that email for the provided country database (only works with partial accounts). 3) Providing a person_id, this way it will update the account associated with that identifier (only works with partial accounts).",
			"collectionId": "8bd4197d-482e-9ec7-b75d-63a4daea27f5",
			"responses": [],
			"folder": "f4a3efc7-b4cf-8ce9-73dc-174cea88fcd8",
			"rawModeData": "{\n  \"email_marketing_opt_in\": true,\n  \"first_name\": \"Patch\",\n  \"gender\": \"female\",\n  \"last_name\": \"Lyonhart_{{$timestamp}}\",\n  \"messaging_preferences\": {\n    \"food\": {\n      \"email\": true,\n      \"push\": true,\n      \"sms\": true\n    },\n    \"parking\": {\n      \"email\": true,\n      \"push\": true,\n      \"sms\": true\n    }\n  },\n  \"newsletter_subscriptions\": [ \"london_general\" ]\n}"
		},
		{
			"id": "98505c78-722d-d5c2-fab3-67850d62386a",
			"headers": "",
			"url": "https://secure.uat.westfield.io/v1/staff/token/info?access_token={{bare_token}}&api_key=BEPH3JFgNsYetXCBx6tOdHGJzA6rwjgY",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "var response = JSON.parse(responseBody);\nvar now = Date(now);\n\n//standard array of tests\ntests[\"Successful GET request\"] = responseCode.code === 200;\ntests[\"Response has data field\"] = responseBody.has(\"data\");\ntests[\"Response has errors field\"] = responseBody.has(\"errors\");\ntests[\"Response has no errors\"] = jQuery.isEmptyObject(response.errors);\ntests[\"Response has meta field\"] = responseBody.has(\"meta\");\n\n//case specific tests\ntests[\"scopes is populated\"] = response.scopes !== null;\ntests[\"expires_in_seconds is populated\"] = response.expires_in_seconds !== null;\ntests[\"expires_at is populated\"] = response.expires_at !== null;\ntests[\"expires_at is in the future\"] = response.expires_at < now;\ntests[\"session_id is populated\"] = response.session_id !== null;\ntests[\"application is populated\"] = response.application !== null;\ntests[\"uuid is populated\"] = response.uuid !== null;\ntests[\"resource_owner is populated\"] = response.resource_owner !== null;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1469057063674,
			"name": "Returns Information about an OAuth Access token.",
			"description": "",
			"collectionId": "8bd4197d-482e-9ec7-b75d-63a4daea27f5",
			"responses": []
		},
		{
			"id": "9beaae84-55b2-31e1-7020-762b796ee6e0",
			"headers": "Authorization: {{staff_access_token}}\n",
			"url": "{{HOST}}/v1/staff/{{staff_uuid}}?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "var response = JSON.parse(responseBody);\n\n//standard array of tests\ntests[\"Successful GET request\"] = responseCode.code === 200;\ntests[\"Response has data field\"] = responseBody.has(\"data\");\ntests[\"Response has errors field\"] = responseBody.has(\"errors\");\ntests[\"Response has no errors\"] = jQuery.isEmptyObject(response.errors);\ntests[\"Response has meta field\"] = responseBody.has(\"meta\");\n\n//case specific tests\ntests[\"id is populated\"] = response.id !== null;\ntests[\"uuid is populated\"] = response.uuid !== null;\ntests[\"okta_id is populated\"] = response.okta_id !== null;\ntests[\"first_name is populated\"] = response.first_name !== null;\ntests[\"last_name is populated\"] = response.last_name !== null;\ntests[\"email is populated\"] = response.email !== null;\ntests[\"country is populated\"] = response.country !== null;\ntests[\"confirmation_token is populated\"] = response.confirmation_token !== null;\ntests[\"response is populated\"] = response.confirmed_at !== null;\ntests[\"updated_at is populated\"] = response.updated_at !== null;\ntests[\"created_at is populated\"] = response.created_at !== null;\ntests[\"disabled_at is populated\"] = response.disabled_at !== null;\ntests[\"rolls is populated\"] = response.rolls !== null;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1469055806561,
			"name": "A specific staff.",
			"description": "Returns a staff",
			"collectionId": "8bd4197d-482e-9ec7-b75d-63a4daea27f5",
			"responses": []
		},
		{
			"id": "a2a0d4e6-8b91-d8e0-96a5-14905f5266e4",
			"headers": "Authorization: {{Authorization}}\n",
			"url": "{{HOST}}/v1/account/parking/sessions/summary?centre_id=london&page=1&per_page=150&api_key={{api_key}}&license_plate=HJKL691",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "var response = JSON.parse(responseBody);\n\ntests[\"Successful POST request\"] = responseCode.code === 200;\ntests[\"Response has data field\"] = responseBody.has(\"data\");\ntests[\"Response has no errors\"] = jQuery.isEmptyObject(response.errors);\ntests[\"Response has meta field\"] = responseBody.has(\"meta\");\n\n//case specific tests\nvar response = JSON.parse(responseBody);\n\ntests[\"month returns correctly\"] = response.data[0].month === 6;\ntests[\"year returns correctly\"] = response.data[0].year === 2016;\ntests[\"total_sessions returns correctly\"] = response.data[0].total_sessions === 1;\ntests[\"total_cost returns correctly\"] = response.data[0].total_cost === \"£15.00\";\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468449320040,
			"name": "List all parking sessions summary for a license plate.",
			"description": "Request an array of parking sessions summary for a license plate.",
			"collectionId": "8bd4197d-482e-9ec7-b75d-63a4daea27f5",
			"responses": [],
			"folder": "5ffee319-8526-d8ce-a125-978b4c0ff223"
		},
		{
			"id": "a4d67325-c53f-1abf-ee56-f44fd583d380",
			"headers": "Authorization: {{Authorization}}\n",
			"url": "{{HOST}}/v1/account/credit_cards?page=1&per_page=25&api_key={{api_key}}&fields=card_type,created_at,deleted_at,first_name,first_six_digits,last_four_digits,last_name,last_used_for_food,month,parking_card,payment_method_token,postal_code,year",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "// var response = JSON.parse(responseBody);\n\n// tests[\"Successful GET request\"] = responseCode.code === 200;\n// tests[\"Response has data field\"] = responseBody.has(\"data\");\n// // tests[\"Response has no errors\"] = responseBody.has(\"errors\".size = 0);\n\n// // //case specific tests\n// tests[\"card_type is true\"] = response.data[0].card_type === \"visa\";\n// tests[\"first_name returns correctly\"] = response.data[0].first_name === \"Patched\";\n// tests[\"last_name returns correctly\"] = response.data[0].last_name === \"Lyonhart\";\n// tests[\"first_six_digits returns correctly\"] = response.data[0].first_six_digits === \"411111\";\n// tests[\"last_four_digits returns correctly\"] = response.data[0].last_four_digits === \"1111\";\n// tests[\"month returns correctly\"] = response.data[0].month === 10;\n// tests[\"year returns correctly\"] = response.data[0].year === 2018;\n// tests[\"payment_method_token returns correctly\"] = response.data[0].payment_method_token === environment.payment_method_token;\n// tests[\"postal_code returns correctly\"] = response.data[0].postal_code === \"11111\";\n// tests[\"parking_card returns correctly\"] = response.data[0].parking_card === true;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468954912467,
			"name": "List user credit cards.",
			"description": "Request an array of credit cards.",
			"collectionId": "8bd4197d-482e-9ec7-b75d-63a4daea27f5",
			"responses": []
		},
		{
			"id": "a5e90e5c-812d-d349-e2e7-e362be884cfe",
			"headers": "Authorization: {{Authorization}}\n",
			"url": "{{HOST}}/v1/account/parking/history?centre_id=london&page=1&per_page=250&api_key={{api_key}}&bust={{timestamp}}&fields=centre_id,currency,credit_card,entry_at,exit_at,formatted_total_time,parking_session_id,total_time,transaction_final_amount,vehicle",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "var response = JSON.parse(responseBody);\n\ntests[\"Successful POST request\"] = responseCode.code === 200;\ntests[\"Response has data field\"] = responseBody.has(\"data\");\ntests[\"Response has no errors\"] = jQuery.isEmptyObject(response.errors);\ntests[\"Response has meta field\"] = responseBody.has(\"meta\");\n\n//case specific tests\ntests[\"centre_id returns correctly\"] = response.data[0].centre_id === \"london\";\ntests[\"currency returns correctly\"] = response.data[0].currency === \"GBP\";\n// tests[\"email_marketing_opt_in is true\"] = response.data.credit_card === true;  // currently returning 'null' possibly as a result of recycling payment_method_tokens\ntests[\"entry_at is a date\"] = Number.isInteger(Date.parse(response.data[0].entry_at));\ntests[\"exit_at is a date\"] = Number.isInteger(Date.parse(response.data[0].exit_at));\ntests[\"formatted time returns correctly\"] = response.data[0].formatted_total_time === \"2 HOURS\";\ntests[\"parking_session_id returns an int\"] = Number.isInteger(response.data[0].parking_session_id);\ntests[\"total_time returns correct number of secs\"] = response.data[0].total_time === 7200 && Number.isInteger(response.data[0].total_time);\ntests[\"transaction_final_amount returns correct number of cents\"] = response.data[0].transaction_final_amount === 1500 && Number.isInteger(response.data[0].transaction_final_amount);\ntests[\"license_plate returns correctly\"] = response.data[0].vehicle.license_plate.substring(0,4) === \"HJKL\";\ntests[\"vehicle name returns correctly\"] = response.data[0].vehicle.name === \"super awesome rag-top car\";\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468449328347,
			"name": "List parking activities history from a user.",
			"description": "Request an array of parking activities.",
			"collectionId": "8bd4197d-482e-9ec7-b75d-63a4daea27f5",
			"responses": [],
			"folder": "5ffee319-8526-d8ce-a125-978b4c0ff223"
		},
		{
			"id": "a96f64a2-f10e-b818-0b22-493a1fa54a2c",
			"headers": "Content-Type: application/json\n",
			"url": "{{HOST}}/v1/staff/revoke?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Successful DELETION\"] = responseCode.code === 200;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1469057150685,
			"name": "Revoke an OAuth token.",
			"description": "",
			"collectionId": "8bd4197d-482e-9ec7-b75d-63a4daea27f5",
			"responses": [],
			"rawModeData": "{\n  \"token\": \"5efd7686d0dc1dbe1054dff0a2be6f794ed5378ffde47a904249e40dad1c77f9\"\n}"
		},
		{
			"id": "acb47230-6023-0074-044b-5a5a6fdac487",
			"headers": "Content-Type: application/json\n",
			"url": "{{HOST}}/v1/account?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "var response = JSON.parse(responseBody);\n\n//set environment variables\npostman.setGlobalVariable('api_key','SRaDlpIlGYwc73HY1WKI8VRvijaXHIEu');\npostman.setEnvironmentVariable('password','Pass1234');\npostman.setEnvironmentVariable('patched_pass',\"Patched_Pass1234\");\npostman.setEnvironmentVariable('email',response.data.email);\npostman.setEnvironmentVariable('person_id',response.data.person_id);\n\n\n//standard array of tests\ntests[\"Successful POST request\"] = responseCode.code === 201;\ntests[\"Response has data field\"] = responseBody.has(\"data\");\ntests[\"Response has no errors\"] = jQuery.isEmptyObject(response.errors);\ntests[\"Response has meta field\"] = responseBody.has(\"meta\");\n\n//case specific tests\n\ntests[\"email address returns correctly\"] = response.data.email === environment.email;\ntests[\"email_marketing_opt_in is true\"] = response.data.email_marketing_opt_in === true;\ntests[\"first_name returns correctly\"] = response.data.first_name === \"Eli\";\n// tests[\"last_name returns correctly\"] = response.data.last_name === environment.last_name;\n\nfor (var key in response.data.messaging_preferences.food){\n  tests[\"messaging_preferences[food] are all false\"] = response.data.messaging_preferences.food[key] === false;\n}\nfor (var key in response.data.messaging_preferences.parking){\n  tests[\"messaging_preferences[parking] are all false\"] = response.data.messaging_preferences.parking[key] === false;\n}\n\ntests[\"london added to newsletter_centre_ids\"] = response.data.newsletter_centre_ids.includes(\"london\");\ntests[\"stratfordcity added to newsletter_centre_ids\"] = response.data.newsletter_centre_ids.includes(\"stratfordcity\");\n\ntests[\"london_general subscribed to\"] = response.data.newsletter_subscriptions.includes(\"london_general\");\ntests[\"stratfordcity_general subscribed to\"] = response.data.newsletter_subscriptions.includes(\"stratfordcity_general\");\ntests[\"newsletter_subscriptions return the correct quantity\"] = response.data.newsletter_subscriptions.length === 2;\n\ntests[\"person_id starts with 'WF-'\"] = response.data.person_id.substring(0,3) === \"WF-\";\ntests[\"phone_number returns correctly\"] = response.data.phone_number === \"445551000000\";\ntests[\"primary_centre_id returns correctly\"] = response.data.primary_centre_id === \"london\";\n\n// tests[\"registered_for_parking returns correctly\"] = response.data.registered_for_parking === true; < - - - this route doesnt respond?\ntests[\"sms_marketing_opt_in returns correctly\"] = response.data.sms_marketing_opt_in === true;\n\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468965495895,
			"name": "POST /account (full) - Happy Path",
			"description": "Create a person account.",
			"collectionId": "8bd4197d-482e-9ec7-b75d-63a4daea27f5",
			"responses": [],
			"rawModeData": "{\n  \"creation_source\": \"newsletter\",\n  \"email\": \"devNull_full_account_test_{{$timestamp}}@dbg.westfield.com\",\n  \"email_marketing_opt_in\": true,\n  \"first_name\": \"Eli\",\n  \"gender\": \"female\",\n  \"password\": \"{{password}}\",\n  \"last_name\": \"Lyonhart_{{$timestamp}}\",\n  \"newsletter_subscriptions\": [\"london_general\", \"stratfordcity_general\"],\n  \"primary_centre_id\": \"london\",\n  \"phone_number\": \"445551000000\",\n  \"registered_for_parking\": true,\n  \"sms_marketing_opt_in\": true\n}"
		},
		{
			"id": "b19d6b97-b5bf-6fab-ef7a-6124d75a3f65",
			"headers": "Content-Type: application/json\n",
			"url": "https://core.spreedly.com/v1/payment_methods.json?environment_key={{spreedly_env_key}}&api_key={{spreedly_api_key}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "var response = JSON.parse(responseBody);\npostman.setEnvironmentVariable('payment_method_token',response.transaction.payment_method.token);\n\ntests[\"Successful POST request\"] = responseCode.code === 201;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468954702691,
			"name": "Spreedly: Add Card",
			"description": "",
			"collectionId": "8bd4197d-482e-9ec7-b75d-63a4daea27f5",
			"responses": [],
			"rawModeData": "{\n  \"month\": \"8\",\n  \"year\": \"2019\",\n  \"number\": \"4111111111111111\", \n  \"card_type\": \"visa\", \n  \"first_name\": \"Johnny\", \n  \"last_name\": \"Lyonhart: Secret Agent\", \n  \"zip\": \"17377\"\n}"
		},
		{
			"id": "b9a22d77-9e93-b92d-dc9f-18b1c7a626df",
			"headers": "Content-Type: application/json\n",
			"url": "{{HOST}}/v1/staff/token?api_key=BEPH3JFgNsYetXCBx6tOdHGJzA6rwjgY",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "var response = JSON.parse(responseBody);\n\npostman.setEnvironmentVariable(\"staff_access_token\", \"bearer \" + response.access_token);\npostman.setEnvironmentVariable(\"bare_token\", response.access_token);\n\ntests[\"Successful POST request\"] = responseCode.code === 200;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1469054832531,
			"name": "Create staff OAuth token.",
			"description": "If you send the grant type `client_credentials` you must also provide the `client_id` and `client_secret`. If you send the grant type `password` you must also provide the `username` and `password`; you may optionally provide `client_id` and `client_secret`. If you send the grant type as `authorization_code`, you must provide the `client_id` and `client_secret` along with the `code` and `redirect_uri`.",
			"collectionId": "8bd4197d-482e-9ec7-b75d-63a4daea27f5",
			"responses": [],
			"rawModeData": "{\n  \"grant_type\":\"password\",\n  \"username\":\"retailer-test@example.com\",\n  \"password\":\"testpassword\",\n  \"client_id\":\"14c10708dce450ec8970c94b38934248470ce5c2af142494c0eb9a04ccc181b0\",\n  \"client_secret\": \"e60c6ba435d3ad67b7596b907f1f03f2761dc58815cfe0a017cd70054f8a8d22\"\n}"
		},
		{
			"id": "bc88511f-8930-28f1-a34c-fdeb89e66aaf",
			"headers": "Content-Type: application/json\n",
			"url": "{{HOST}}/v1/people/oauth/token?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "//endpoint specific elements\nvar response = JSON.parse(responseBody);\npostman.setEnvironmentVariable('Authorization','bearer '.concat(response.access_token));\n\n//standard array of tests\ntests[\"Successful POST request\"] = responseCode.code === 200;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468449150752,
			"name": "Create user OAuth token for seeded parking user.",
			"description": "Generates a token that is needed to manage the user profile\n\n**Seed User**\nemail: devnull_parking_user@dbg.westfield.com\nid: WF-ef809da8fd7445e5b89a64bff444d9b6\nfirst name: Test\nlast name: User_1467062015",
			"collectionId": "8bd4197d-482e-9ec7-b75d-63a4daea27f5",
			"responses": [],
			"folder": "5ffee319-8526-d8ce-a125-978b4c0ff223",
			"rawModeData": "{\n  \"grant_type\": \"password\",\n  \"username\": \"devnull_parking_user@dbg.westfield.com\",\n  \"password\": \"{{password}}\",\n  \"country\": \"UK\"\n}"
		},
		{
			"id": "c716675b-695a-88a8-5d4e-ae15fd5d287d",
			"headers": "Authorization: {{staff_access_token}}\n",
			"url": "{{HOST}}/v1/people/{{person_id}}/food/history?page=1&per_page=250&api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "var response = JSON.parse(responseBody);\nvar order_one = response.data[0];\n\n//set environment variables\npostman.setEnvironmentVariable('food_order_id',order_one.food_order_id);\n\n//standard array of tests\ntests[\"Successful GET request\"] = responseCode.code === 200;\ntests[\"Response has data field\"] = responseBody.has(\"data\");\ntests[\"Response has no errors\"] = jQuery.isEmptyObject(response.errors);\ntests[\"Response has meta field\"] = responseBody.has(\"meta\");\n\n//case specific tests\ntests[\"created_at is populated\"] = order_one.created_at !== null;\ntests[\"food_order_id is populated\"] = order_one.food_order_id !== null;\ntests[\"restaurant field is populated\"] = order_one.restaurant !== null;\ntests[\"at least one item ordered\"] = order_one.order_items.length > 0;\ntests[\"credit_card is populated\"] = order_one.restaurant !== null;\ntests[\"credit_card is populated with correct information\"] = order_one.credit_card.payment_method_token === environment.payment_method_token; //WTF? Why This Failing?\ntests[\"total_amount is populated\"] = order_one.total_amount !== null;\ntests[\"status is populated\"] = order_one.status !== null;\n\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1469046199704,
			"name": "List food ordering activities history from a user.",
			"description": "Request an array of food ordering activities.",
			"collectionId": "8bd4197d-482e-9ec7-b75d-63a4daea27f5",
			"responses": []
		},
		{
			"id": "c857f37e-4b41-5eeb-1fae-4ae1bb6537ff",
			"headers": "Authorization: {{Authorization}}\nContent-Type: application/json\n",
			"url": "{{HOST}}/v1/account/password?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "PATCH",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "//standard array of tests\ntests[\"Successful POST request\"] = responseCode.code === 200 ||responseCode.code === 201 || responseCode.code === 204;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1467735346963,
			"name": "Change account password",
			"description": "Change account password",
			"collectionId": "8bd4197d-482e-9ec7-b75d-63a4daea27f5",
			"responses": [],
			"folder": "f4a3efc7-b4cf-8ce9-73dc-174cea88fcd8",
			"rawModeData": "{\n  \"current_password\": \"{{password}}\",\n  \"new_password\": \"{{patched_pass}}\"\n}"
		},
		{
			"id": "cc146922-b0c1-d5da-b04c-c37d5e3674fc",
			"headers": "Authorization: {{Authorization}}\nContent-Type: application/json\n",
			"url": "{{HOST}}/v1/account/vehicles?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "var response = JSON.parse(responseBody);\n\npostman.setEnvironmentVariable('license_plate',response.data.license_plate);\n\ntests[\"Successful POST request\"] = responseCode.code === 201;\ntests[\"Response has data field\"] = responseBody.has(\"data\");\ntests[\"Response has no errors\"] = jQuery.isEmptyObject(response.errors);\ntests[\"Response has meta field\"] = responseBody.has(\"meta\");\n\ntests[\"vehicle created with no parking history\"] = response.data.last_parking_session_at === null;\ntests[\"license_plate returns correctly\"] = response.data.license_plate.substring(0,4) === \"HJKL\";\ntests[\"vehicle name returns correctly\"] = response.data.name === \"Car.\";\n\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468446939048,
			"name": "Add a vehicle to a user account.",
			"description": "Request adding a vehicle to a user account from JSON data in the request body.",
			"collectionId": "8bd4197d-482e-9ec7-b75d-63a4daea27f5",
			"responses": [],
			"folder": "5ffee319-8526-d8ce-a125-978b4c0ff223",
			"rawModeData": "{\n  \"license_plate\": \"HJKL{{$randomInt}}\",\n  \"name\": \"Car.\"\n}"
		},
		{
			"id": "ce4b617a-772d-9e27-bf8b-7b3c907a9253",
			"headers": "Authorization: {{Authorization}}\nContent-Type: application/json\nAccept-Encoding: gzip,deflate\n",
			"url": "{{HOST}}/v1/account?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Successful DELETE request\"] = responseCode.code === 204;\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1466635643099,
			"name": "Delete full account.",
			"description": "Request deletion of an account.",
			"collectionId": "8bd4197d-482e-9ec7-b75d-63a4daea27f5",
			"responses": [],
			"folder": "f4a3efc7-b4cf-8ce9-73dc-174cea88fcd8",
			"rawModeData": ""
		},
		{
			"id": "d22bf54b-883e-7d05-4e8a-1f5887189c51",
			"headers": "Authorization: {{staff_access_token}}\n",
			"url": "{{HOST}}/v1/people/{{person_id}}/credit_cards?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "var response = JSON.parse(responseBody);\nvar card_one = response.data[0];\n\npostman.setEnvironmentVariable('payment_method_token',card_one.payment_method_token);\n\n//standard array of tests\ntests[\"Successful GET request\"] = responseCode.code === 200;\ntests[\"Response has data field\"] = responseBody.has(\"data\");\ntests[\"Response has no errors\"] = jQuery.isEmptyObject(response.errors);\ntests[\"Response has meta field\"] = responseBody.has(\"meta\");\n\n//case specific tests\ntests[\"card type is 'visa'\"] = card_one.card_type === \"visa\";\ntests[\"first_six_digits return correctly\"] = card_one.first_six_digits === \"411111\";\ntests[\"last_four_digits return correctly\"] = card_one.last_four_digits === \"1111\";",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1469038110964,
			"name": "Retrieve a person account credit cards.",
			"description": "Retrieve an account credit cards.",
			"collectionId": "8bd4197d-482e-9ec7-b75d-63a4daea27f5",
			"responses": []
		},
		{
			"id": "d366c175-586e-487d-6c0a-3c3dadef2744",
			"headers": "Authorization: {{Authorization}}\n",
			"url": "{{HOST}}/v1/account/credit_cards/{{payment_method_token}}?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Successful Delete request\"] = responseCode.code === 204;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468954630608,
			"name": "Soft-delete a credit card.",
			"description": "Request deletion of a credit card.",
			"collectionId": "8bd4197d-482e-9ec7-b75d-63a4daea27f5",
			"responses": []
		},
		{
			"id": "d845e634-5dd7-5bb7-8c73-e4a5838939c5",
			"headers": "Content-Type: application/json\n",
			"url": "{{HOST}}/v1/people/oauth/token?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "//endpoint specific elements\nvar response = JSON.parse(responseBody);\npostman.setEnvironmentVariable('Authorization','bearer '.concat(response.access_token));\n\n//standard array of tests\ntests[\"Successful POST request\"] = responseCode.code === 200;\ntests[\"Response has no errors\"] = jQuery.isEmptyObject(response.errors);\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468444142827,
			"name": "Create user OAuth token.",
			"description": "Generates a token that is needed to manage the user profile",
			"collectionId": "8bd4197d-482e-9ec7-b75d-63a4daea27f5",
			"responses": [],
			"folder": "2483beb5-79d1-b245-9929-36a9dcc1aff7",
			"rawModeData": "{\n  \"grant_type\": \"password\",\n  \"username\": \"{{email}}\",\n  \"password\": \"{{password}}\",\n  \"country\": \"UK\"\n}"
		},
		{
			"id": "d9f5e075-ac3c-a788-5bd2-0e53f2ed33c6",
			"headers": "Authorization: {{Authorization}}\n",
			"url": "{{HOST}}/v1/account/vehicles?include_deleted=true&page=1&per_page=250&api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Successful POST request\"] = responseCode.code === 200;\n\n//case specific tests\nvar response = JSON.parse(responseBody);\n\ntests[\"created_at returns correctly\"] =  Number.isInteger(Date.parse(response.data[0].created_at));\ntests[\"license_plate returns correctly\"] = response.data[0].license_plate.substring(0,4) === \"HJKL\";\ntests[\"deleted_at returns correctly\"] = Number.isInteger(Date.parse(response.data[response.data.length-1].deleted_at));\ntests[\"vehicle name returns correctly\"] = response.data[0].name === \"Car.\";",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468449889568,
			"name": "List user vehicles.",
			"description": "Request an array of vehicles.",
			"collectionId": "8bd4197d-482e-9ec7-b75d-63a4daea27f5",
			"responses": [],
			"folder": "5ffee319-8526-d8ce-a125-978b4c0ff223"
		},
		{
			"id": "e5e58165-76a5-3c7f-d936-29d846924a3f",
			"headers": "Content-Type: application/json\nAuthorization: {{Authorization}}\n",
			"url": "{{HOST}}/v1/account?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "PATCH",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 204\"] = responseCode.code === 204;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1467323785251,
			"name": "Update a person account.",
			"description": "There are 3 possible ways to specify which account should be updated. 1) Providing an access token, that will return update the account associated to the token (only works with full accounts). 2) Providing an email address and a country, this way it will update the account that holds that email for the provided country database (only works with partial accounts). 3) Providing a person_id, this way it will update the account associated with that identifier (only works with partial accounts).",
			"collectionId": "8bd4197d-482e-9ec7-b75d-63a4daea27f5",
			"responses": [],
			"folder": "19672a79-5cfb-a189-f872-196cb8c2765a",
			"rawModeData": "{\n  \"email_marketing_opt_in\": false,\n  \"first_name\": \"Patch\",\n  \"gender\": \"female\",\n  \"last_name\": \"Lyonhart_{{$timestamp}}\",\n  \"newsletter_subscriptions\": []\n}"
		}
	]
}