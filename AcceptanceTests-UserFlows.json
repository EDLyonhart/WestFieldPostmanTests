{
	"id": "29ea12cd-2d9e-d310-1d6c-667926167da5",
	"name": "Acceptance Tests : User Flows",
	"description": "",
	"order": [],
	"folders": [
		{
			"id": "8b3ad0cc-a5f5-86b7-1a4a-acdc75c31b58",
			"name": "Parking",
			"description": "",
			"order": [
				"03940258-12cc-dc4d-bc41-e689b8a8879c",
				"1fd510d5-8248-af91-3a25-4a33e3e9b887",
				"d1df65c6-18d1-ebce-ad57-8641a59e82d3",
				"fa8a82da-1a99-67be-8ef5-87d062b4c6b5",
				"faedd680-7008-8e73-c63c-bcf8391992bb",
				"65b26949-4f58-44c7-0d56-51e071eb4b80",
				"9057e427-da77-a7e6-44ee-e075833c0988",
				"a859ca1a-217c-82e2-1252-6f3ec5aea35e",
				"1cc6ae06-727e-d604-2d37-b28392ba1908",
				"7167eb5b-224c-c568-4c1f-65a1c61fb747",
				"d74765bd-d46e-15ed-fdd5-b6c0cc7ad05d",
				"6103b3b6-16e4-5f69-bb6a-9dcb82c953c7",
				"10c26649-edfa-b98f-16ea-0799200c0f3f",
				"cfe369bb-c98b-b8d0-80d2-f914a20813f6",
				"400a8426-3df2-ee57-446c-2ffa0c3f8a45",
				"8c6e6c71-a530-3875-6db8-8498a77fd70c",
				"dd3cb2f1-066b-3535-5c8a-8def702701ce",
				"a1518696-04d5-768d-7fea-132994cf9037",
				"9c975c4c-c5e7-44fc-8af9-8d84a4cb2031",
				"2a925e69-52d4-a911-6217-9e65c86211af",
				"8236f935-b698-49df-ea0e-7a565558dd78",
				"e68726dd-6062-40cd-009a-7000202a6cdc",
				"6b556523-2491-7821-ae3d-ad42ae4b95e4",
				"110a4b3a-339c-e9ba-581e-5131614cacfe",
				"3c7146bd-4972-591e-db06-4e93cc0c3426",
				"e3e88d47-5d35-b1a4-461c-f8e7308b2234"
			],
			"owner": "355839",
			"collectionId": "29ea12cd-2d9e-d310-1d6c-667926167da5"
		},
		{
			"id": "eefb8de5-d825-24ef-7429-29c77d777ea0",
			"name": "Partial Accounts / Newsletters",
			"description": "",
			"order": [
				"d8b2fe9d-9113-ce36-871d-3531663ad78e",
				"efb8745c-697b-14dd-81fb-81971ca44a1f",
				"c7c6fee2-8811-636d-ac45-ff00c164b71f",
				"19df4a03-a668-050c-a0f0-c8832690290a",
				"2147d22b-19a1-4300-d10d-74042b3bd545",
				"5c85455d-556a-c2a1-bead-71e1a9235e5e",
				"3fcc7677-82af-21c9-9e52-7c879790a222",
				"30c71f2b-823f-91cc-85fe-0a11d13b2927",
				"eb086dd2-d541-302d-0262-b0bac03f005f",
				"2e1de005-acd5-bf27-fc4e-f21a6895f0a1",
				"87cad109-6d39-be00-c20c-dd6d2838d4fb",
				"08ecae40-b28f-e05c-2e75-efc844200f34",
				"ff04f20e-1c2c-6580-a4c0-666cb7bb3087",
				"90a98775-5a12-c500-bec7-99b477d49f61"
			],
			"owner": "355839",
			"collectionId": "29ea12cd-2d9e-d310-1d6c-667926167da5"
		},
		{
			"id": "f2726d3a-0d9f-725f-2291-9fc58e283124",
			"name": "Staff Access Flow / User Update",
			"description": "",
			"order": [
				"eb77f3c2-cdac-fc1a-18c0-0d2f66ecff9f",
				"69006477-b281-224a-9a47-31f5d1cfe357",
				"bdcce316-feb1-552f-7cd6-d37a88c1a284",
				"2d456db9-c7f2-342b-637c-b5a272faf564",
				"98b301d8-597c-0c30-85f5-167e153a6c94",
				"ff2a5b18-fa83-8f59-3329-590e2617c062",
				"992382f0-0d41-9bf4-be7d-329de1decf50",
				"ff4ca849-8b9a-4678-3df8-83f335766101",
				"d0ead605-21fe-88f2-88b2-abef432b6147",
				"83577bae-47c7-10ae-1b02-e9864b634587",
				"6854e499-2c71-3d72-9f36-3e1b3d679d58",
				"84446fbe-1c07-13c0-0436-98a32932897a",
				"21b37cf3-2baf-c192-24c0-7fc1b50aa971",
				"fc3cfe40-04e4-b7eb-4a52-8dd543f82b95",
				"399872e6-52ac-ad84-bd76-dc708c3fb9b7",
				"c814b5e5-fd71-fe98-3b09-19e9e85c06a8",
				"47742ba1-b4ef-6b3e-8d09-42d99cb9ccf6",
				"3f240bff-0edf-ed2d-a94a-e210935b0bfb",
				"9f5dee53-4581-64ff-32b1-49d79254ec68"
			],
			"owner": "355839",
			"collectionId": "29ea12cd-2d9e-d310-1d6c-667926167da5"
		},
		{
			"id": "1ab05ed9-9208-3389-ca00-d74de9df4ce5",
			"name": "Wishlists / Favorites",
			"description": "",
			"order": [
				"32e09b05-5bf2-aefe-9051-3244f8949fd1",
				"200053f9-e292-2008-7efe-1e8e6b6d7678",
				"fe6f3b82-7a12-c61b-7254-5637173759fa",
				"2bf40fb0-885e-2e21-bb73-02f4408df3c4",
				"0a49ffce-eb3b-54d5-07a8-02a08e40c6fc",
				"7fd4b9f0-f719-4c42-1ed2-b7776703bd69",
				"20ba452d-3a90-4107-3ac9-9f6639558fbd",
				"f8641c01-d4d9-2485-ff55-d3dbc78a1fca",
				"582d3179-a08a-22a5-4d93-b4bac61b85bb",
				"476b7028-12d9-594e-6b73-6f1c77d28db5"
			],
			"owner": "355839",
			"collectionId": "29ea12cd-2d9e-d310-1d6c-667926167da5"
		}
	],
	"timestamp": 1467324203347,
	"owner": "355839",
	"public": false,
	"published": false,
	"requests": [
		{
			"id": "03940258-12cc-dc4d-bc41-e689b8a8879c",
			"headers": "Content-Type: application/json\n",
			"url": "{{HOST}}/v1/account?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "var response = JSON.parse(responseBody);\n\n//set environment variables\npostman.setEnvironmentVariable('email',response.data.email);\npostman.setEnvironmentVariable('person_id',response.data.person_id);\npostman.setEnvironmentVariable('end_date',response.data.created_at.substring(0,10));\n\n//standard array of tests\ntests[\"Successful POST request\"] = responseCode.code === 201;\ntests[\"Response has data field\"] = responseBody.has(\"data\");\ntests[\"Response has no errors\"] = jQuery.isEmptyObject(response.errors);\ntests[\"Response has meta field\"] = responseBody.has(\"meta\");\n\n//case specific tests\n\ntests[\"email address returns correctly\"] = response.data.email === environment.email;\ntests[\"email_marketing_opt_in is true\"] = response.data.email_marketing_opt_in === true;\ntests[\"first_name returns correctly\"] = response.data.first_name === \"Eli\";\ntests[\"last_name returns correctly\"] = response.data.last_name.substring(0,9) === \"Lyonhart_\";\n\nfor (var key in response.data.messaging_preferences.food){\n  tests[\"messaging_preferences[food] are all false\"] = response.data.messaging_preferences.food[key] === false;\n}\nfor (var key in response.data.messaging_preferences.parking){\n  tests[\"messaging_preferences[parking] are all false\"] = response.data.messaging_preferences.parking[key] === false;\n}\n\ntests[\"london added to newsletter_centre_ids\"] = response.data.newsletter_centre_ids.includes(\"london\");\n\ntests[\"london_general subscribed to\"] = response.data.newsletter_subscriptions.includes(\"london_general\");\ntests[\"newsletter_subscriptions return the correct quantity\"] = response.data.newsletter_subscriptions.length === 1;\n\ntests[\"person_id starts with 'WF-'\"] = response.data.person_id.substring(0,3) === \"WF-\";\ntests[\"phone_number returns correctly\"] = response.data.phone_number === \"445551000000\";\ntests[\"primary_centre_id returns correctly\"] = response.data.primary_centre_id === \"london\";\n\n// tests[\"registered_for_parking returns correctly\"] = response.data.registered_for_parking === true; < - - - this route doesnt respond?\ntests[\"sms_marketing_opt_in returns correctly\"] = response.data.sms_marketing_opt_in === true;\n\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468615072400,
			"name": "Create a person account.",
			"description": "Create a person account.",
			"collectionId": "29ea12cd-2d9e-d310-1d6c-667926167da5",
			"responses": [],
			"rawModeData": "{\n  \"creation_source\": \"newsletter\",\n  \"email\": \"devNull_payment_parking_flow_{{$timestamp}}@dbg.westfield.com\",\n  \"email_marketing_opt_in\": true,\n  \"first_name\": \"Eli\",\n  \"gender\": \"female\",\n  \"password\": \"{{password}}\",\n  \"last_name\": \"Lyonhart_{{$timestamp}}\",\n  \"newsletter_subscriptions\": [],\n  \"primary_centre_id\": \"{{centre}}\",\n  \"phone_number\": \"445551000000\",\n  \"registered_for_parking\": true,\n  \"sms_marketing_opt_in\": true\n}"
		},
		{
			"id": "08ecae40-b28f-e05c-2e75-efc844200f34",
			"headers": "Authorization: {{Authorization}}\n",
			"url": "{{HOST}}/v1/people/oauth/token/info?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "var response = JSON.parse(responseBody);\n\n//standard array of tests\ntests[\"Successful GET request\"] = responseCode.code === 200;\n\n//case specific tests\ntests[\"token has no scopes\"] = response.scopes.length === 0\ntests[\"token belongs to correct user\"] = response.person_id === environment.person_id",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468282655836,
			"name": "Returns Information about an OAuth Access token.",
			"description": "",
			"collectionId": "29ea12cd-2d9e-d310-1d6c-667926167da5",
			"responses": []
		},
		{
			"id": "0a49ffce-eb3b-54d5-07a8-02a08e40c6fc",
			"headers": "",
			"url": "https://api.westfield.io/v1/events?api_key={{wfapi_key}}&deleted=false&status=active&centre_id={{centre}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "var response = JSON.parse(responseBody);\n\n//set environment variables\npostman.setEnvironmentVariable('event_id',response.data[0].event_id);\n\n//standard array of tests\ntests[\"Successful GET request\"] = responseCode.code === 200;\ntests[\"Response has data field\"] = responseBody.has(\"data\");\ntests[\"Response has no errors\"] = jQuery.isEmptyObject(response.errors);\ntests[\"Response has meta field\"] = responseBody.has(\"meta\");\n\n//case specific tests\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468434867058,
			"name": "List events.",
			"description": "Request an array of events filtered by allowed parameters.",
			"collectionId": "29ea12cd-2d9e-d310-1d6c-667926167da5",
			"responses": []
		},
		{
			"id": "10c26649-edfa-b98f-16ea-0799200c0f3f",
			"headers": "",
			"url": "{{HOST}}/v1/parking/sessions/open?person_id={{person_id}}&centre_id={{centre}}&access_device={{license_plate}}&api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "var response = JSON.parse(responseBody);\n\n//standard array of tests\ntests[\"Successful POST request\"] = responseCode.code === 200;\ntests[\"Response has data field\"] = responseBody.has(\"data\");\ntests[\"Response has no errors\"] = jQuery.isEmptyObject(response.errors);\ntests[\"Response has meta field\"] = responseBody.has(\"meta\");\n\n//endpoing specific tests\ntests[\"expected device returned\"] = response.data[0].access_device === environment.license_plate;\ntests[\"expected centre returned\"] = response.data[0].centre_id === environment.centre;\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468879652323,
			"name": "Retrieve information of open parking sessions.",
			"description": "Retrieve the most recent open parking activity session details for a user with the given person_id. Open sessions have an entry date but no corresponding exit date.",
			"collectionId": "29ea12cd-2d9e-d310-1d6c-667926167da5",
			"responses": []
		},
		{
			"id": "110a4b3a-339c-e9ba-581e-5131614cacfe",
			"headers": "Content-Type: application/json\n",
			"url": "{{HOST}}/v1/parking/sessions/{{parking_session_id}}/refund?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "var response = JSON.parse(responseBody);\n\n//standard array of tests\ntests[\"Successful GET request\"] = responseCode.code === 200;\ntests[\"Response has data field\"] = responseBody.has(\"data\");\ntests[\"Response has data field\"] = responseBody.has(\"meta\");\ntests[\"Response has no errors\"] = jQuery.isEmptyObject(response.errors);\n\n//case specific tests\ntests[\"message indicates success\"] = response.data.message === \"Succeeded!\";\ntests[\"parking_session_id is correct\"] = response.data.parking_session_id === parseInt(environment.parking_session_id);\ntests[\"status is correct\"] = response.data.status === \"succeeded\";\ntests[\"type is correct\"] = response.data.type === \"refund\";",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1467936457109,
			"name": "Refund a parking session charge.",
			"description": "Refund a parking session charge.",
			"collectionId": "29ea12cd-2d9e-d310-1d6c-667926167da5",
			"responses": [],
			"rawModeData": "{\n  \"reason\": \"stolen vehicle!\"\n}"
		},
		{
			"id": "19df4a03-a668-050c-a0f0-c8832690290a",
			"headers": "Content-Type: application/json\n",
			"url": "{{HOST}}/v1/account/newsletters/subscribe?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "PATCH",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "//set environment variables\nvar response = JSON.parse(responseBody);\n\n//standard array of tests\ntests[\"Successful POST request\"] = responseCode.code === 200;\ntests[\"Response has data field\"] = responseBody.has(\"data\");\ntests[\"Response has no errors\"] = jQuery.isEmptyObject(response.errors);\n\n//case specific tests\ntests[\"email_marketing_opt_in is true\"] = response.data.email_marketing_opt_in === true;\ntests[\"london is only newsletter_centre_ids\"] = response.data.newsletter_centre_ids.includes(\"london\");\ntests[\"london is only newsletter_centre_ids\"] = response.data.newsletter_centre_ids.length === 1;\ntests[\"london_general is only newsletter subscribed to\"] = response.data.newsletter_subscriptions.includes(\"london_general\");\ntests[\"london_general is only newsletter subscribed to\"] = response.data.newsletter_subscriptions.length === 1;\ntests[\"primary_centre_id returns correctly\"] = response.data.primary_centre_id === \"london\";\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1467760844628,
			"name": "Update newsletter details for the account.",
			"description": "Request update of newsletter subscriptions and email_marketing_opt_in for account.",
			"collectionId": "29ea12cd-2d9e-d310-1d6c-667926167da5",
			"responses": [],
			"rawModeData": "{\n  \"email\": \"{{email}}\",\n  \"country\": \"UK\",\n  \"newsletter_access_token\": \"{{newsletter_access_token}}\",\n  \"newsletter_subscriptions\": [\n    \"london_general\"\n  ],\n  \"email_marketing_opt_in\": true,\n  \"person_id\": \"{{person_id}}\"\n}"
		},
		{
			"id": "1cc6ae06-727e-d604-2d37-b28392ba1908",
			"headers": "Authorization: {{Authorization}}\nContent-Type: application/json\n",
			"url": "{{HOST}}/v1/account/vehicles/{{license_plate}}?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "PATCH",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Vehicle successfully updated\"] = responseCode.code === 204;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1467752024953,
			"name": "Update a vehicle",
			"description": "Request update of a vehicle from JSON data in request body.",
			"collectionId": "29ea12cd-2d9e-d310-1d6c-667926167da5",
			"responses": [],
			"rawModeData": "{\n  \"name\": \"updated_car_name\"\n}"
		},
		{
			"id": "1fd510d5-8248-af91-3a25-4a33e3e9b887",
			"headers": "Content-Type: application/json\n",
			"url": "{{HOST}}/v1/people/oauth/token?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "//endpoint specific elements\nvar response = JSON.parse(responseBody);\npostman.setEnvironmentVariable('Authorization','bearer '.concat(response.access_token));\n\n//standard array of tests\ntests[\"Successful POST request\"] = responseCode.code === 200 ||responseCode.code === 201 || responseCode.code === 202;\ntests[\"Response has no errors\"] = responseBody.has(\"errors\".size = 0);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1467320161138,
			"name": "Create user OAuth token.",
			"description": "Generates a token that is needed to manage the user profile",
			"collectionId": "29ea12cd-2d9e-d310-1d6c-667926167da5",
			"responses": [],
			"folder": "8b3ad0cc-a5f5-86b7-1a4a-acdc75c31b58",
			"rawModeData": "{\n  \"grant_type\": \"password\",\n  \"username\": \"{{email}}\",\n  \"password\": \"{{password}}\",\n  \"country\": \"{{country}}\"\n}"
		},
		{
			"id": "200053f9-e292-2008-7efe-1e8e6b6d7678",
			"headers": "Content-Type: application/json\n",
			"url": "{{HOST}}/v1/people/oauth/token?api_key={{api_key}}",
			"pathVariables": {},
			"preRequestScript": "",
			"method": "POST",
			"collectionId": "29ea12cd-2d9e-d310-1d6c-667926167da5",
			"data": [],
			"dataMode": "raw",
			"name": "Create user OAuth token.",
			"description": "Generates a token that is needed to manage the user profile",
			"descriptionFormat": "html",
			"time": 1468362092805,
			"version": 2,
			"responses": [],
			"tests": "//endpoint specific elements\nvar response = JSON.parse(responseBody);\npostman.setEnvironmentVariable('Authorization','bearer '.concat(response.access_token));\n\n//standard array of tests\ntests[\"Successful POST request\"] = responseCode.code === 200 ||responseCode.code === 201 || responseCode.code === 202;\ntests[\"Response has no errors\"] = responseBody.has(\"errors\".size = 0);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"folder": "1ab05ed9-9208-3389-ca00-d74de9df4ce5",
			"rawModeData": "{\n  \"grant_type\": \"password\",\n  \"username\": \"{{email}}\",\n  \"password\": \"{{password}}\",\n  \"country\": \"{{country}}\"\n}"
		},
		{
			"id": "20ba452d-3a90-4107-3ac9-9f6639558fbd",
			"headers": "Authorization: {{Authorization}}\nContent-Type: application/json\n",
			"url": "{{HOST}}/v1/favorites/items/bulk?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "//standard array of tests\ntests[\"Successful GET request\"] = responseCode.code === 204;\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468535162600,
			"name": "Add an array of items to be created.",
			"description": "Add an array of items to be created.",
			"collectionId": "29ea12cd-2d9e-d310-1d6c-667926167da5",
			"responses": [],
			"rawModeData": "[\n  {\n    \"kind\": \"deal\",\n    \"resource_id\": \"{{deal_id}}\",\n    \"platform_source\": \"android\"\n  },\n    {\n    \"kind\": \"event\",\n    \"resource_id\": \"{{event_id}}\",\n    \"platform_source\": \"android\"\n  },\n    {\n    \"kind\": \"retailer\",\n    \"resource_id\": \"{{retailer_id}}\",\n    \"platform_source\": \"android\"\n  }\n]"
		},
		{
			"id": "2147d22b-19a1-4300-d10d-74042b3bd545",
			"headers": "",
			"url": "https://secure.uat.westfield.io/v1/account/newsletters?api_key={{api_key}}&newsletter_access_token={{newsletter_access_token}}&email={{email}}&country={{country}}&person_id={{person_id}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "//set environment variables\nvar response = JSON.parse(responseBody);\n\n//standard array of tests\ntests[\"Successful POST request\"] = responseCode.code === 200;\ntests[\"Response has data field\"] = responseBody.has(\"data\");\ntests[\"Response has no errors\"] = jQuery.isEmptyObject(response.errors);\n\n//case specific tests\ntests[\"email_marketing_opt_in is true\"] = response.data.email_marketing_opt_in === true;\ntests[\"london is only newsletter_centre_ids\"] = response.data.newsletter_centre_ids.includes(\"london\");\ntests[\"london is only newsletter_centre_ids\"] = response.data.newsletter_centre_ids.length === 1;\ntests[\"london_general is only newsletter subscribed to\"] = response.data.newsletter_subscriptions.includes(\"london_general\");\ntests[\"london_general is only newsletter subscribed to\"] = response.data.newsletter_subscriptions.length === 1;\ntests[\"primary_centre_id returns correctly\"] = response.data.primary_centre_id === \"london\";\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1467760921253,
			"name": "Get newsletter subscriptions for the account",
			"description": "Request to get the newsletter subscriptions for the account. Full accounts require a token to access, partial accounts do not.",
			"collectionId": "29ea12cd-2d9e-d310-1d6c-667926167da5",
			"responses": []
		},
		{
			"id": "21b37cf3-2baf-c192-24c0-7fc1b50aa971",
			"headers": "Authorization: {{staff_access_token}}\nContent-Type: application/json\n",
			"url": "{{HOST}}/v1/people/{{person_id}}/interests?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468262842044,
			"name": "Replace account interests with new interests.",
			"description": "Replace account interests for the given person_id. Requires staff authentication.",
			"collectionId": "29ea12cd-2d9e-d310-1d6c-667926167da5",
			"responses": [],
			"rawModeData": "{\n  \"interest_ids\": [\n    \"54\"\n  ],\n  \"interests_updated_from\": \"android\"\n}"
		},
		{
			"id": "2a925e69-52d4-a911-6217-9e65c86211af",
			"headers": "",
			"url": "{{HOST}}/v1/parking/sessions/{{parking_session_id}}?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "var response = JSON.parse(responseBody);\n\n//standard array of tests\ntests[\"Successful GET request\"] = responseCode.code === 200;\ntests[\"Response has data field\"] = responseBody.has(\"data\");\ntests[\"Response has data field\"] = responseBody.has(\"meta\");\ntests[\"Response has no errors\"] = jQuery.isEmptyObject(response.errors);\n\n//case specific tests\ntests[\"vehicle is correct\"] = response.data.access_device === environment.license_plate;\ntests[\"centre_id is correct\"] = response.data.centre_id === \"london\";\ntests[\"currency is correct\"] = response.data.currency === \"GBP\";\ntests[\"payment_method_token returns correctly\"] = response.data.payment_method_token === environment.payment_method_token;\ntests[\"payment_status returns correctly\"] = response.data.payment_status === \"succeeded\"; // PEEPS-2105\ntests[\"entry_at returns correctly\"] = response.data.entry_at === \"2016-06-07T16:31:42Z\";\ntests[\"exit_at returns correctly\"] = response.data.exit_at === \"2016-06-08T09:15:11Z\";\ntests[\"total_time returns correctly\"] = response.data.total_time === 60208;\ntests[\"transaction_final_amount returns correctly\"] = response.data.transaction_final_amount === 3000;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468519925855,
			"name": "Retrieve information for a single parking session.",
			"description": "Request to retrieve information for a single parking session.",
			"collectionId": "29ea12cd-2d9e-d310-1d6c-667926167da5",
			"responses": []
		},
		{
			"id": "2bf40fb0-885e-2e21-bb73-02f4408df3c4",
			"headers": "",
			"url": "https://api.westfield.io/v1/stores?api_key={{wfapi_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "var response = JSON.parse(responseBody);\n\n//set environment variables\npostman.setEnvironmentVariable('retailer_id',response.data[0].retailer_code);\n\n//standard array of tests\ntests[\"Successful GET request\"] = responseCode.code === 200;\ntests[\"Response has data field\"] = responseBody.has(\"data\");\ntests[\"Response has no errors\"] = jQuery.isEmptyObject(response.errors);\ntests[\"Response has meta field\"] = responseBody.has(\"meta\");\n\n//case specific tests\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468534898012,
			"name": "List stores.",
			"description": "Request an array of stores filtered by allowed parameters.",
			"collectionId": "29ea12cd-2d9e-d310-1d6c-667926167da5",
			"responses": []
		},
		{
			"id": "2d456db9-c7f2-342b-637c-b5a272faf564",
			"headers": "Content-Type: application/json\n",
			"url": "{{HOST}}/v1/staff/token?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "var response = JSON.parse(responseBody);\npostman.setEnvironmentVariable(\"staff_access_token\", \"bearer \" + response.access_token);\npostman.setEnvironmentVariable(\"bare_token\", response.access_token);\n\n\ntests[\"Successful POST request\"] = responseCode.code === 200;\n\n//case specific tests\ntests[\"token type is bearer\"] = response.token_type === \"bearer\";\ntests[\"token last correct length of time\"] = response.expires_in === 28800;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468257263567,
			"name": "Create staff OAuth token.",
			"description": "If you send the grant type `client_credentials` you must also provide the `client_id` and `client_secret`. If you send the grant type `password` you must also provide the `username` and `password`; you may optionally provide `client_id` and `client_secret`. If you send the grant type as `authorization_code`, you must provide the `client_id` and `client_secret` along with the `code` and `redirect_uri`.",
			"collectionId": "29ea12cd-2d9e-d310-1d6c-667926167da5",
			"responses": [],
			"rawModeData": "{\n  \"grant_type\":\"password\",\n  \"username\":\"{{staff_username}}\",\n  \"password\":\"{{staff_password}}\",\n  \"client_id\":\"{{staff_user_id}}\",\n  \"client_secret\": \"{{staff_user_secret}}\"\n}"
		},
		{
			"id": "2e1de005-acd5-bf27-fc4e-f21a6895f0a1",
			"headers": "",
			"url": "{{HOST}}/v1/account/status?country={{country}}&email={{email}}&api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "//set environment variables\nvar response = JSON.parse(responseBody);\n\n//standard array of tests\ntests[\"Successful POST request\"] = responseCode.code === 200;\ntests[\"Response has data field\"] = responseBody.has(\"data\");\ntests[\"Response has no errors\"] = jQuery.isEmptyObject(response.errors);\n\n//case specific tests\ntests[\"account is full\"] = response.data === \"full\"",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1467838795733,
			"name": "Retrieve account status",
			"description": "Return the status of account, which can be: [\"full\", \"partial\", \"none\", \"deleted\", \"locked\"].",
			"collectionId": "29ea12cd-2d9e-d310-1d6c-667926167da5",
			"responses": []
		},
		{
			"id": "30c71f2b-823f-91cc-85fe-0a11d13b2927",
			"headers": "Authorization: {{Authorization}}\nContent-Type: application/json\n",
			"url": "{{HOST}}/v1/account/interests?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "PUT",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Interests successfully added\"] = responseCode.code === 200;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468361813609,
			"name": "Replace account interests with new interests.",
			"description": "Replace account interests. Requires authentication. Replacing interest list for partial accounts is not supported.",
			"collectionId": "29ea12cd-2d9e-d310-1d6c-667926167da5",
			"responses": [],
			"rawModeData": "{\n  \"interest_ids\": [\n    \"65\",\"53\",\"171\",\"37\",\"67\",\"152\",\"82\",\"137\",\"138\",\"2\",\"102\",\"29\",\"109\",\"183\",\"54\",\"50\",\"395\",\"419\",\"81\",\"532\"\n  ],\n  \"interests_updated_from\": \"android\"\n}"
		},
		{
			"id": "32e09b05-5bf2-aefe-9051-3244f8949fd1",
			"headers": "Content-Type: application/json\n",
			"url": "{{HOST}}/v1/account?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "var response = JSON.parse(responseBody);\n\n//set environment variables\npostman.setEnvironmentVariable('email',response.data.email);\npostman.setEnvironmentVariable('person_id',response.data.person_id);\npostman.setEnvironmentVariable('end_date',response.data.created_at.substring(0,10));\n\n//standard array of tests\ntests[\"Successful POST request\"] = responseCode.code === 201;\ntests[\"Response has data field\"] = responseBody.has(\"data\");\ntests[\"Response has no errors\"] = jQuery.isEmptyObject(response.errors);\ntests[\"Response has meta field\"] = responseBody.has(\"meta\");\n\n//case specific tests\n\ntests[\"email address returns correctly\"] = response.data.email === environment.email;\ntests[\"email_marketing_opt_in is true\"] = response.data.email_marketing_opt_in === true;\ntests[\"first_name returns correctly\"] = response.data.first_name === \"Eli\";\ntests[\"last_name returns correctly\"] = response.data.last_name.substring(0,9) === \"Lyonhart_\";\n\nfor (var key in response.data.messaging_preferences.food){\n  tests[\"messaging_preferences[food] are all false\"] = response.data.messaging_preferences.food[key] === false;\n}\nfor (var key in response.data.messaging_preferences.parking){\n  tests[\"messaging_preferences[parking] are all false\"] = response.data.messaging_preferences.parking[key] === false;\n}\n\ntests[\"london added to newsletter_centre_ids\"] = response.data.newsletter_centre_ids.includes(\"london\");\n\ntests[\"london_general subscribed to\"] = response.data.newsletter_subscriptions.includes(\"london_general\");\ntests[\"newsletter_subscriptions return the correct quantity\"] = response.data.newsletter_subscriptions.length === 1;\n\ntests[\"person_id starts with 'WF-'\"] = response.data.person_id.substring(0,3) === \"WF-\";\ntests[\"phone_number returns correctly\"] = response.data.phone_number === \"445551000000\";\ntests[\"primary_centre_id returns correctly\"] = response.data.primary_centre_id === \"london\";\n\n// tests[\"registered_for_parking returns correctly\"] = response.data.registered_for_parking === true; < - - - this route doesnt respond?\ntests[\"sms_marketing_opt_in returns correctly\"] = response.data.sms_marketing_opt_in === true;\n\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468366024342,
			"name": "Create a person account.",
			"description": "Create a person account.",
			"collectionId": "29ea12cd-2d9e-d310-1d6c-667926167da5",
			"responses": [],
			"rawModeData": "{\n  \"creation_source\": \"newsletter\",\n  \"email\": \"devNull_wishlist_flow_{{$timestamp}}@dbg.westfield.com\",\n  \"email_marketing_opt_in\": true,\n  \"first_name\": \"Eli\",\n  \"gender\": \"female\",\n  \"password\": \"{{password}}\",\n  \"last_name\": \"Lyonhart_{{$timestamp}}\",\n  \"newsletter_subscriptions\": [],\n  \"primary_centre_id\": \"{{centre}}\",\n  \"phone_number\": \"445551000000\",\n  \"registered_for_parking\": true,\n  \"sms_marketing_opt_in\": true\n}"
		},
		{
			"id": "399872e6-52ac-ad84-bd76-dc708c3fb9b7",
			"headers": "Authorization: {{staff_access_token}}\nContent-Type: application/json\n",
			"url": "{{HOST}}/v1/people/{{person_id}}/kids?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "PUT",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "var response = JSON.parse(responseBody);\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\ntests[\"All kids accounted for\"] = response.data.length = 1;\n\ntests[\"first name returns correctly\"] = response.data[0].first_name === \"ten\";\ntests[\"birth date returns correctly\"] = response.data[0].birth_date === \"2016-07-11\";\ntests[\"gender returns correctly\"] = response.data[0].gender === \"m\";",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468264381759,
			"name": "Replace kids in account.",
			"description": "Replace kids in account for the given person_id. Requires staff authentication.",
			"collectionId": "29ea12cd-2d9e-d310-1d6c-667926167da5",
			"responses": [],
			"rawModeData": "{\n  \"kids\": [\n    {\n      \"birth_date\": \"2016-07-11\",\n      \"first_name\": \"ten\",\n      \"gender\": \"m\"\n    }\n  ]\n}"
		},
		{
			"id": "3c7146bd-4972-591e-db06-4e93cc0c3426",
			"headers": "Authorization: {{Authorization}}\n",
			"url": "{{HOST}}/v1/account/credit_cards/{{payment_method_token}}?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Successful Delete request\"] = responseCode.code === 204;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1469571851474,
			"name": "Soft-delete a credit card.",
			"description": "Request deletion of a credit card.",
			"collectionId": "29ea12cd-2d9e-d310-1d6c-667926167da5",
			"responses": []
		},
		{
			"id": "3f240bff-0edf-ed2d-a94a-e210935b0bfb",
			"headers": "Authorization: {{staff_access_token}}\nContent-Type: application/json\n",
			"url": "{{HOST}}/v1/people/{{person_id}}/parking/invoice?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 204\"] = responseCode.code === 204;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468278976993,
			"name": "Send parking invoice email.",
			"description": "Request to send parking invoice email.",
			"collectionId": "29ea12cd-2d9e-d310-1d6c-667926167da5",
			"responses": [],
			"rawModeData": "{\n  \"centre_id\": \"{{centre}}\",\n  \"end_date\": \"2016-07-11\",\n  \"license_plate\": \"{{license_plate}}\",\n  \"start_date\": \"2015-07-11\"\n}"
		},
		{
			"id": "3fcc7677-82af-21c9-9e52-7c879790a222",
			"headers": "Content-Type: application/json\n",
			"url": "{{HOST}}/v1/people/oauth/token?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "//endpoint specific elements\nvar response = JSON.parse(responseBody);\npostman.setEnvironmentVariable('Authorization','bearer '.concat(response.access_token));\n\n//standard array of tests\ntests[\"Successful POST request\"] = responseCode.code === 200 ||responseCode.code === 201 || responseCode.code === 202;\ntests[\"Response has no errors\"] = responseBody.has(\"errors\".size = 0);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1467761760114,
			"name": "Create user OAuth token.",
			"description": "Generates a token that is needed to manage the user profile",
			"collectionId": "29ea12cd-2d9e-d310-1d6c-667926167da5",
			"responses": [],
			"rawModeData": "{\n  \"grant_type\": \"password\",\n  \"username\": \"{{email}}\",\n  \"password\": \"{{password}}\",\n  \"country\": \"{{country}}\"\n}"
		},
		{
			"id": "400a8426-3df2-ee57-446c-2ffa0c3f8a45",
			"headers": "",
			"url": "http://fake-response.appspot.com/?sleep=10",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": null,
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468347060464,
			"name": "sleep 10 seconds",
			"description": "",
			"collectionId": "29ea12cd-2d9e-d310-1d6c-667926167da5",
			"responses": []
		},
		{
			"id": "476b7028-12d9-594e-6b73-6f1c77d28db5",
			"headers": "",
			"url": "{{HOST}}/v1/favorites/{{person_id}}?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "//standard array of tests\ntests[\"Successful DELETE request\"] = responseCode.code === 204;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468442262711,
			"name": "Delete all data for a specific user.",
			"description": "Delete all data for a specific user.",
			"collectionId": "29ea12cd-2d9e-d310-1d6c-667926167da5",
			"responses": []
		},
		{
			"id": "47742ba1-b4ef-6b3e-8d09-42d99cb9ccf6",
			"headers": "Authorization: {{staff_access_token}}\n",
			"url": "{{HOST}}/v1/people/{{person_id}}/parking/history?centre_id={{centre}}&page=1&per_page=250&start_date=01-01-2015&end_date=07-11-2016&license_plate={{license_plate}}&api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "var response = JSON.parse(responseBody);\n\n//standard array of tests\ntests[\"Successful POST request\"] = responseCode.code === 200;\ntests[\"Response has data field\"] = responseBody.has(\"data\");\ntests[\"Response has no errors\"] = jQuery.isEmptyObject(response.errors);\ntests[\"Response has data field\"] = responseBody.has(\"meta\");\n\n//case specific tests\n\ntests[\"centre returns correctly\"] = response.data[0].centre_id === environment.centre;\ntests[\"currency returns correctly\"] = response.data[0].currency === \"GBP\";\ntests[\"formatted_total_time returns correctly\"] = response.data[0].formatted_total_time === \"17 HOURS\";\ntests[\"formatted_transaction_final_amount returns correctly\"] = response.data[0].formatted_transaction_final_amount === \"£30.00\";\ntests[\"transaction_final_amount returns correctly\"] = response.data[0].transaction_final_amount === 3000;\ntests[\"license_plate returns correctly\"] = response.data[0].vehicle.license_plate === environment.license_plate;\ntests[\"vehicle name returns correctly\"] = response.data[0].vehicle.name === \"Vehicle\";\n\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468278917317,
			"name": "List parking activities history from a user.",
			"description": "Request an array of parking activities.",
			"collectionId": "29ea12cd-2d9e-d310-1d6c-667926167da5",
			"responses": []
		},
		{
			"id": "582d3179-a08a-22a5-4d93-b4bac61b85bb",
			"headers": "Authorization: {{Authorization}}\nContent-Type: application/json\n",
			"url": "{{HOST}}/v1/favorites/items/product/{{product_id}}?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "var response = JSON.parse(responseBody);\n\n//standard array of tests\ntests[\"Successful DELETE request\"] = responseCode.code === 200;\ntests[\"Response has data field\"] = responseBody.has(\"data\");\ntests[\"Response has no errors\"] = jQuery.isEmptyObject(response.errors);\ntests[\"Response has meta field\"] = responseBody.has(\"meta\");\n\n//case specific tests\ntests[\"Correct item name returned\"] = !jQuery.isEmptyObject(response.data.data.product);\ntests[\"Correct resource 'kind' returned\"] = response.data.kind === \"product\";\ntests[\"Correct resource_id returned\"] = response.data.resource_id === environment.product_id;\n\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468442238520,
			"name": "Delete an item from the favorites list.",
			"description": "Delete an item from the favorites list.",
			"collectionId": "29ea12cd-2d9e-d310-1d6c-667926167da5",
			"responses": [],
			"rawModeData": ""
		},
		{
			"id": "5c85455d-556a-c2a1-bead-71e1a9235e5e",
			"headers": "Content-Type: application/json\n",
			"url": "{{HOST}}/v1/account/upgrade?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Successfully upgrade partial account\"] = responseCode.code === 204;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1467761004953,
			"name": "Upgrade a partial account to a full account",
			"description": "Upgrade a partial account to a full account. Needs either a person_id, or an email and country to identify the account to be upgraded.",
			"collectionId": "29ea12cd-2d9e-d310-1d6c-667926167da5",
			"responses": [],
			"rawModeData": "{\n  \"email\": \"{{email}}\",\n  \"country\": \"{{country}}\",\n  \"person_id\": \"{{person_id}}\",\n  \"first_name\": \"Billy\",\n  \"last_name\": \"the_Kidd\",\n  \"password\": \"{{password}}\"\n}"
		},
		{
			"id": "6103b3b6-16e4-5f69-bb6a-9dcb82c953c7",
			"headers": "Authorization: {{parking_access_token}}\nContent-Type: application/json\n",
			"url": "{{HOST}}/v1/parking/activities?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "var response = JSON.parse(responseBody);\n\n//standard array of tests\ntests[\"Successful POST request\"] = responseCode.code === 201;\ntests[\"Response has data field\"] = responseBody.has(\"data\");\ntests[\"Response has no errors\"] = jQuery.isEmptyObject(response.errors);\n\n//case specific tests\n\ntests[\"email address returns correctly\"] = response.data.activity_type === \"parking_entry\";\ntests[\"email_marketing_opt_in is true\"] = response.data.centre_id === \"london\";\ntests[\"first_name returns correctly\"] = response.data.currency === \"GBP\";\ntests[\"last_name returns correctly\"] = response.data.transaction_final_amount === 0;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468879232710,
			"name": "Create a parking activity.entry",
			"description": "Request creation of a parking activity from JSON data in the request body.",
			"collectionId": "29ea12cd-2d9e-d310-1d6c-667926167da5",
			"responses": [],
			"rawModeData": "{\n  \"access_device\": \"{{license_plate}}\",\n  \"activity_type\": \"parking_entry\",\n  \"activity_at\": \"2016-06-07T16:31:42.713Z\",\n  \"centre_id\": \"{{centre}}\",\n  \"currency\": \"GBP\",\n  \"payment_method_token\": \"{{payment_method_token}}\",\n  \"person_id\": \"{{person_id}}\",\n  \"transaction_final_amount\": 0\n}"
		},
		{
			"id": "65b26949-4f58-44c7-0d56-51e071eb4b80",
			"headers": "Authorization: {{Authorization}}\n",
			"url": "{{HOST}}/v1/account/parking/signup?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Successful sign-up response\"] = responseCode.code === 200;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1467750639451,
			"name": "Signup a user to parking service.",
			"description": "Request to signup a user account to parking service.",
			"collectionId": "29ea12cd-2d9e-d310-1d6c-667926167da5",
			"responses": []
		},
		{
			"id": "6854e499-2c71-3d72-9f36-3e1b3d679d58",
			"headers": "Authorization: {{staff_access_token}}\nContent-Type: application/json\n",
			"url": "{{HOST}}/v1/people/{{person_id}}?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "PATCH",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 204\"] = responseCode.code === 204;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468261125054,
			"name": "Update a person account.",
			"description": "Update a account.",
			"collectionId": "29ea12cd-2d9e-d310-1d6c-667926167da5",
			"responses": [],
			"rawModeData": "{\n  \"email\": \"{{email}}\",\n  \"email_marketing_opt_in\": true,\n  \"first_name\": \"Patched\",\n  \"gender\": \"male\",\n  \"last_name\": \"User\",\n  \"messaging_preferences\": {\n    \"food\": {\n      \"email\": true,\n      \"push\": true,\n      \"sms\": true\n    },\n    \"parking\": {\n      \"email\": true,\n      \"push\": true,\n      \"sms\": true\n    }\n  },\n  \"newsletter_subscriptions\": [\n    \"stratfordcity_general\"\n  ],\n  \"phone_number\": \"015550001111\",\n  \"primary_centre_id\": \"stratfordcity\",\n  \"sms_marketing_opt_in\": true\n}"
		},
		{
			"id": "69006477-b281-224a-9a47-31f5d1cfe357",
			"headers": "Content-Type: application/json\n",
			"url": "{{HOST}}/v1/staff/token?api_key=BEPH3JFgNsYetXCBx6tOdHGJzA6rwjgY",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "var response = JSON.parse(responseBody);\n\npostman.setEnvironmentVariable(\"parking_access_token\", \"bearer \" + response.access_token);\n\ntests[\"Token was successfully generated\"] = responseCode.code === 200;\ntests[\"Token returned is correct type\"] = response.token_type === \"bearer\"\ntests[\"Token returned has correct scope\"] = response.scope === \"parkiq\"\n\n\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468277296178,
			"name": "Create staff OAuth token (parking).",
			"description": "If you send the grant type `client_credentials` you must also provide the `client_id` and `client_secret`. If you send the grant type `password` you must also provide the `username` and `password`; you may optionally provide `client_id` and `client_secret`. If you send the grant type as `authorization_code`, you must provide the `client_id` and `client_secret` along with the `code` and `redirect_uri`.",
			"collectionId": "29ea12cd-2d9e-d310-1d6c-667926167da5",
			"responses": [],
			"rawModeData": "{\n  \"grant_type\":\"client_credentials\",\n  \"client_id\":\"{{parking_staff_id}}\",\n  \"client_secret\": \"{{parking_staff_secret}}\",\n  \"scope\": \"parkiq\"\n}"
		},
		{
			"id": "6b556523-2491-7821-ae3d-ad42ae4b95e4",
			"headers": "",
			"url": "{{HOST}}/v1/parking/sessions/summary?access_device={{license_plate}}&centre_id={{centre}}&person_id={{person_id}}&page=1&per_page=250&api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "var response = JSON.parse(responseBody);\n\n//standard array of tests\ntests[\"Successful GET request\"] = responseCode.code === 200;\ntests[\"Response has data field\"] = responseBody.has(\"data\");\ntests[\"Response has data field\"] = responseBody.has(\"meta\");\ntests[\"Response has no errors\"] = jQuery.isEmptyObject(response.errors);\n\n//case specific tests\ntests[\"year is correct\"] = response.data[0].year === 2016;\ntests[\"month is correct\"] = response.data[0].month === 6;\ntests[\"currency returns correctly\"] = response.data[0].currency === \"GBP\";",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1467935687908,
			"name": "Retrieve a summary for each month of received access device and person id on a given center.",
			"description": "Retrieve a summary for each month of received access device and person id on a given center.",
			"collectionId": "29ea12cd-2d9e-d310-1d6c-667926167da5",
			"responses": []
		},
		{
			"id": "7167eb5b-224c-c568-4c1f-65a1c61fb747",
			"headers": "Authorization: {{Authorization}}\n",
			"url": "{{HOST}}/v1/account/vehicles?fields=license_plate,name&include_deleted=trie&used_for_parking=false&page=1&per_page=250&api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "\n//standard array of tests\nvar response = JSON.parse(responseBody);\ntests[\"Successfully retrieved vehicles\"] = responseCode.code === 200;\ntests[\"Response has data field\"] = responseBody.has(\"data\");\ntests[\"Response has no errors\"] = jQuery.isEmptyObject(response.errors);\n\n//case specific tests\n\ntests[\"license_plate returns correctly\"] = response.data[0].license_plate.substring(0,4) ===  \"HJKL\";\ntests[\"vehicle name returns correctly\"] = response.data[0].name === \"updated_car_name\";",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1467752184141,
			"name": "List user vehicles.",
			"description": "Request an array of vehicles.",
			"collectionId": "29ea12cd-2d9e-d310-1d6c-667926167da5",
			"responses": []
		},
		{
			"id": "7fd4b9f0-f719-4c42-1ed2-b7776703bd69",
			"headers": "",
			"url": "https://api.westfield.io/v1/deals?api_key={{wfapi_key}}&centre_id={{centre}}&country={{country}}&deleted=false&sort=ends_at desc",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "var response = JSON.parse(responseBody);\n\n//set environment variables\npostman.setEnvironmentVariable('deal_id',response.data[0].deal_id);\n\n//standard array of tests\ntests[\"Successful GET request\"] = responseCode.code === 200;\ntests[\"Response has data field\"] = responseBody.has(\"data\");\ntests[\"Response has no errors\"] = jQuery.isEmptyObject(response.errors);\ntests[\"Response has meta field\"] = responseBody.has(\"meta\");\n\n//case specific tests\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468434795450,
			"name": "List deals.",
			"description": "Request an array of deals filtered by allowed parameters.",
			"collectionId": "29ea12cd-2d9e-d310-1d6c-667926167da5",
			"responses": []
		},
		{
			"id": "8236f935-b698-49df-ea0e-7a565558dd78",
			"headers": "",
			"url": "{{HOST}}/v1/parking/sessions/invoice?access_device={{license_plate}}&centre_id={{centre}}&person_id={{person_id}}&start_date={{start_date}}&end_date={{end_date}}&api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "var response = JSON.parse(responseBody);\n\n//standard array of tests\ntests[\"Successful GET request\"] = responseCode.code === 200;\ntests[\"Response has data field\"] = responseBody.has(\"data\");\ntests[\"Response has data field\"] = responseBody.has(\"meta\");\ntests[\"Response has no errors\"] = jQuery.isEmptyObject(response.errors);\n\n//case specific tests\ntests[\"person_id is correct\"] = response.data.person_id === environment.person_id;\ntests[\"license_plate is correct\"] = response.data.sessions[0].access_device === environment.license_plate;\ntests[\"payment_method_token is correct\"] = response.data.sessions[0].payment_method_token === environment.payment_method_token;\ntests[\"transaction_final_amount is correct\"] = response.data.sessions[0].transaction_final_amount === 3000;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468519931132,
			"name": "Retrieve invoice information for a user.",
			"description": "Retrieve all the information necessary to generate a tax invoice for a user.",
			"collectionId": "29ea12cd-2d9e-d310-1d6c-667926167da5",
			"responses": []
		},
		{
			"id": "83577bae-47c7-10ae-1b02-e9864b634587",
			"headers": "Authorization: {{parking_access_token}}\nContent-Type: application/json\n",
			"url": "{{HOST}}/v1/parking/activities?api_key={{api_key}}",
			"pathVariables": {},
			"preRequestScript": "",
			"method": "POST",
			"collectionId": "29ea12cd-2d9e-d310-1d6c-667926167da5",
			"data": [],
			"dataMode": "raw",
			"name": "Create a parking activity.exit",
			"description": "Request creation of a parking activity from JSON data in the request body.",
			"descriptionFormat": "html",
			"time": 1468277315978,
			"version": 2,
			"responses": [],
			"tests": "var response = JSON.parse(responseBody);\n\n//standard array of tests\ntests[\"Successful POST request\"] = responseCode.code === 201;\ntests[\"Response has data field\"] = responseBody.has(\"data\");\ntests[\"Response has no errors\"] = jQuery.isEmptyObject(response.errors);\n\n//case specific tests\n\ntests[\"email address returns correctly\"] = response.data.activity_type === \"parking_exit\";\ntests[\"email_marketing_opt_in is true\"] = response.data.centre_id === \"london\";\ntests[\"first_name returns correctly\"] = response.data.currency === \"GBP\";\ntests[\"last_name returns correctly\"] = response.data.transaction_final_amount === 3000;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"folder": "f2726d3a-0d9f-725f-2291-9fc58e283124",
			"rawModeData": "{\n  \"access_device\": \"{{license_plate}}\",\n  \"activity_type\": \"parking_exit\",\n  \"activity_at\": \"2016-06-08T09:15:11.436Z\",\n  \"centre_id\": \"{{centre}}\",\n  \"currency\": \"GBP\",\n  \"payment_method_token\": \"{{payment_method_token_1}}\",\n  \"person_id\": \"{{person_id}}\",\n  \"transaction_final_amount\": 3000\n}"
		},
		{
			"id": "84446fbe-1c07-13c0-0436-98a32932897a",
			"headers": "Authorization: {{staff_access_token}}\n",
			"url": "{{HOST}}/v1/people/{{person_id}}/interests?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "var response = JSON.parse(responseBody);\n\n//standard array of tests\ntests[\"Successful GET request\"] = responseCode.code === 200;\ntests[\"Response has data field\"] = responseBody.has(\"data\");\ntests[\"Response has no errors\"] = jQuery.isEmptyObject(response.errors);\ntests[\"Response has meta field\"] = responseBody.has(\"meta\");\n\ninterest_array = [\"65\",\"53\",\"171\",\"37\",\"67\",\"152\",\"82\",\"137\",\"138\",\"2\",\"102\",\"29\",\"109\",\"183\",\"54\",\"50\",\"395\",\"419\",\"81\",\"532\"];\ninterest_numb = interest_array.length;\nfor (i=0; i<interest_numb; i++){\n    tests[\"All interests accounted for\"] = interest_array[i] == response.data[i]\n}",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468262243683,
			"name": "Retrieve account interests.",
			"description": "Retrieve account interests for the given person_id. Requires staff authentication.",
			"collectionId": "29ea12cd-2d9e-d310-1d6c-667926167da5",
			"responses": []
		},
		{
			"id": "87cad109-6d39-be00-c20c-dd6d2838d4fb",
			"headers": "Content-Type: application/json\nAuthorization: {{Authorization}}\n",
			"url": "https://secure.uat.westfield.io/v1/account?country={{country}}&api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "PATCH",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Successfully modify account info\"] = responseCode.code === 204;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468537145506,
			"name": "Update a person account.",
			"description": "There are 3 possible ways to specify which account should be updated. 1) Providing an access token, that will return update the account associated to the token (only works with full accounts). 2) Providing an email address and a country, this way it will update the account that holds that email for the provided country database (only works with partial accounts). 3) Providing a person_id, this way it will update the account associated with that identifier (only works with partial accounts).",
			"collectionId": "29ea12cd-2d9e-d310-1d6c-667926167da5",
			"responses": [],
			"rawModeData": "{\n  \"email_marketing_opt_in\": true,\n  \"first_name\": \"Auto-Newsletter Test\",\n  \"gender\": \"female\",\n  \"last_name\": \"05 July\",\n  \"messaging_preferences\": {\n    \"food\": {\n      \"email\": true,\n      \"push\": true,\n      \"sms\": true\n    },\n    \"parking\": {\n      \"email\": true,\n      \"push\": true,\n      \"sms\": true\n    }\n  },\n  \"newsletter_subscriptions\": [\n  ]\n}"
		},
		{
			"id": "8c6e6c71-a530-3875-6db8-8498a77fd70c",
			"headers": "Authorization: {{Authorization}}\n",
			"url": "{{HOST}}/v1/account/parking/history?centre_id={{centre}}&page=1&per_page=250&api_key={{api_key}}&fields=parking_session_id,centre_id,credit_card,currency,entry_at,exit_at,formatted_total_time,_parking_session_id,total_time,transaction_final_amount,vehicle",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "var response = JSON.parse(responseBody);\npostman.setEnvironmentVariable('parking_session_id', response.data[0].parking_session_id);\n\n//standard array of tests\ntests[\"Successful GET request\"] = responseCode.code === 200;\ntests[\"Response has data field\"] = responseBody.has(\"data\");\ntests[\"Response has data field\"] = responseBody.has(\"meta\");\ntests[\"Response has no errors\"] = jQuery.isEmptyObject(response.errors);\n\n//case specific tests\ntests[\"centre_id is correct\"] = response.data[0].centre_id === \"london\";\ntests[\"currency is correct\"] = response.data[0].currency === \"GBP\";\ntests[\"payment_method_token returns correctly\"] = response.data[0].credit_card.payment_method_token === environment.payment_method_token;\ntests[\"entry_at returns correctly\"] = response.data[0].entry_at === \"2016-06-07T16:31:42+00:00\";\ntests[\"exit_at returns correctly\"] = response.data[0].exit_at === \"2016-06-08T09:15:11+00:00\";\ntests[\"formatted_total_time returns correctly\"] = response.data[0].formatted_total_time === \"17 HOURS\";\ntests[\"total_time returns correctly\"] = response.data[0].total_time === 60208;\ntests[\"transaction_final_amount returns correctly\"] = response.data[0].transaction_final_amount === 3000;\n\ntests[\"license_plate returns correctly\"] = response.data[0].vehicle.license_plate === environment.license_plate;\ntests[\"vehicle name returns correctly\"] = response.data[0].vehicle.name === \"updated_car_name\";",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1469571585448,
			"name": "List parking activities history from a user.",
			"description": "Request an array of parking activities.",
			"collectionId": "29ea12cd-2d9e-d310-1d6c-667926167da5",
			"responses": []
		},
		{
			"id": "9057e427-da77-a7e6-44ee-e075833c0988",
			"headers": "Content-Type: application/json\nAuthorization: {{Authorization}}\n",
			"url": "{{HOST}}/v1/account/credit_cards/{{payment_method_token}}?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "PATCH",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Successful card update response\"] = responseCode.code === 204;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468519676262,
			"name": "Update a user credit card.",
			"description": "Request update of a credit card from JSON data in the request body.",
			"collectionId": "29ea12cd-2d9e-d310-1d6c-667926167da5",
			"responses": [],
			"rawModeData": "{\n  \"first_name\": \"Johnny\",\n  \"last_name\": \"Lyonhart\",\n  \"month\": 10,\n  \"postal_code\": \"17377\",\n  \"year\": 2019,\n  \"parking_card\": true\n}"
		},
		{
			"id": "90a98775-5a12-c500-bec7-99b477d49f61",
			"headers": "Authorization: {{Authorization}}\n",
			"url": "{{HOST}}/v1/account?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Successfully delete account\"] = responseCode.code === 204;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1467761371120,
			"name": "Delete an account.",
			"description": "Request deletion of an account.",
			"collectionId": "29ea12cd-2d9e-d310-1d6c-667926167da5",
			"responses": []
		},
		{
			"id": "98b301d8-597c-0c30-85f5-167e153a6c94",
			"headers": "Content-Type: application/json\n",
			"url": "{{HOST}}/v1/account/kids?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468263567167,
			"name": "Add new kids to account.",
			"description": "Add new kids to account.",
			"collectionId": "29ea12cd-2d9e-d310-1d6c-667926167da5",
			"responses": [],
			"rawModeData": "{\n  \"email\": \"{{email}}\",\n  \"country\": \"{{country}}\",\n  \"kids\": [\n    {\n      \"first_name\": \"one\",\n      \"birth_date\": \"2016-06-22\",\n      \"gender\": \"m\"\n    },\n    {\n      \"first_name\": \"two\",\n      \"birth_date\": \"2016-06-22\",\n      \"gender\": \"m\"\n    },\n    {\n      \"first_name\": \"three\",\n      \"birth_date\": \"2016-06-22\",\n      \"gender\": \"m\"\n    },\n    {\n      \"first_name\": \"four\",\n      \"birth_date\": \"2016-06-22\",\n      \"gender\": \"m\"\n    },\n    {\n      \"first_name\": \"five\",\n      \"birth_date\": \"2016-06-22\",\n      \"gender\": \"m\"\n    },\n    {\n      \"first_name\": \"six\",\n      \"birth_date\": \"2016-06-22\",\n      \"gender\": \"m\"\n    },\n    {\n      \"first_name\": \"seven\",\n      \"birth_date\": \"2016-06-22\",\n      \"gender\": \"m\"\n    },\n    {\n      \"first_name\": \"eight\",\n      \"birth_date\": \"2016-06-22\",\n      \"gender\": \"m\"\n    },\n    {\n      \"first_name\": \"nine\",\n      \"birth_date\": \"2016-06-22\",\n      \"gender\": \"m\"\n    }\n  ]\n}"
		},
		{
			"id": "992382f0-0d41-9bf4-be7d-329de1decf50",
			"headers": "",
			"url": "{{HOST}}/v1/staff/token/info?access_token={{bare_token}}&api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "var response = JSON.parse(responseBody);\n\ntests[\"Successful POST request\"] = responseCode.code === 200;\n\n//case specific tests\ntests[\"token expires in a good range\"] = (response.expires_in_seconds < 28800 && response.expires_in_seconds> 28700);\ntests[\"token is connected to correct app\"] = response.application.name === \"testing-app\";\ntests[\"resource_owner is correct\"] = response.resource_owner.first_name === \"Test concierge\";\ntests[\"resource_owner is correct\"] = response.resource_owner.last_name === \"Concierge\";\ntests[\"resource_owner is correct\"] = response.resource_owner.email === environment.staff_username;\ntests[\"resource_owner is correct\"] = response.resource_owner.country === environment.country;\ntests[\"staff_id is correct\"] = response.application.client_id === environment.staff_user_id",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468269629537,
			"name": "Returns Information about an OAuth Access token.",
			"description": "",
			"collectionId": "29ea12cd-2d9e-d310-1d6c-667926167da5",
			"responses": []
		},
		{
			"id": "9c975c4c-c5e7-44fc-8af9-8d84a4cb2031",
			"headers": "Authorization: {{Authorization}}\nContent-Type: application/json\n",
			"url": "{{HOST}}/v1/account/parking/email_invoice?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 204\"] = responseCode.code === 204;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468273577771,
			"name": "Send parking invoice email.",
			"description": "Request to send parking invoice email.",
			"collectionId": "29ea12cd-2d9e-d310-1d6c-667926167da5",
			"responses": [],
			"rawModeData": "{\n  \"centre_id\": \"{{centre}}\",\n  \"end_date\": \"2016-07-11\",\n  \"license_plate\": \"{{license_plate}}\",\n  \"start_date\": \"2015-07-11\"\n}"
		},
		{
			"id": "9f5dee53-4581-64ff-32b1-49d79254ec68",
			"headers": "Authorization: {{staff_access_token}}\n",
			"url": "{{HOST}}/v1/people/{{person_id}}/vehicles/{{license_plate}}?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Vehicle is successfully deleted\"] = responseCode.code === 204;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468270091246,
			"name": "Delete a vehicle.",
			"description": "Request deletion of a vehicle.",
			"collectionId": "29ea12cd-2d9e-d310-1d6c-667926167da5",
			"responses": []
		},
		{
			"id": "a1518696-04d5-768d-7fea-132994cf9037",
			"headers": "",
			"url": "{{HOST}}/v1/parking/sessions?person_id={{person_id}}&centre_id={{centre}}&access_device={{license_plate}}&page=1&per_page=250&api_key={{api_key}}&end_date={{end_date}}&start_date={{start_date}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "var response = JSON.parse(responseBody);\n\n//standard array of tests\ntests[\"Successful GET request\"] = responseCode.code === 200;\ntests[\"Response has data field\"] = responseBody.has(\"data\");\ntests[\"Response has data field\"] = responseBody.has(\"meta\");\ntests[\"Response has no errors\"] = jQuery.isEmptyObject(response.errors);\n\n//case specific tests\ntests[\"vehicle is correct\"] = response.data[0].access_device === environment.license_plate;\ntests[\"centre_id is correct\"] = response.data[0].centre_id === \"london\";\ntests[\"currency is correct\"] = response.data[0].currency === \"GBP\";\ntests[\"payment_method_token returns correctly\"] = response.data[0].payment_method_token === environment.payment_method_token;\ntests[\"payment_status returns correctly\"] = response.data[0].payment_status === \"succeeded\"; // PEEPS-2105\ntests[\"entry_at returns correctly\"] = response.data[0].entry_at === \"2016-06-07T16:31:42Z\";\ntests[\"exit_at returns correctly\"] = response.data[0].exit_at === \"2016-06-08T09:15:11Z\";\ntests[\"total_time returns correctly\"] = response.data[0].total_time === 60208;\ntests[\"transaction_final_amount returns correctly\"] = response.data[0].transaction_final_amount === 3000;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468519918250,
			"name": "Retrieve list of parking sessions.",
			"description": "Retrieve all the parking session details for a user with the given person_id.",
			"collectionId": "29ea12cd-2d9e-d310-1d6c-667926167da5",
			"responses": []
		},
		{
			"id": "a859ca1a-217c-82e2-1252-6f3ec5aea35e",
			"headers": "Authorization: {{Authorization}}\nContent-Type: application/json\n",
			"url": "{{HOST}}/v1/account/vehicles?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "var response = JSON.parse(responseBody);\n\n//set environment variables\npostman.setEnvironmentVariable('license_plate',response.data.license_plate);\n\n//standard array of tests\ntests[\"Successful POST request\"] = responseCode.code === 201;\ntests[\"Response has data field\"] = responseBody.has(\"data\");\ntests[\"Response has no errors\"] = jQuery.isEmptyObject(response.errors);\n\n//case specific tests\ntests[\"vehicle has no parking history\"] = response.data.last_parking_session_at === null;\ntests[\"vehicle name returns correctly\"] = response.data.name === \"Car.\";",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1467935236111,
			"name": "Add a vehicle to a user account.",
			"description": "Request adding a vehicle to a user account from JSON data in the request body.",
			"collectionId": "29ea12cd-2d9e-d310-1d6c-667926167da5",
			"responses": [],
			"rawModeData": "{\n  \"license_plate\": \"HJKL{{$randomInt}}\",\n  \"name\": \"Car.\"\n}"
		},
		{
			"id": "bdcce316-feb1-552f-7cd6-d37a88c1a284",
			"headers": "Content-Type: application/json\n",
			"url": "{{HOST}}/v1/account/interests?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468261190570,
			"name": "Add new interests to account.",
			"description": "Add new interests to account.",
			"collectionId": "29ea12cd-2d9e-d310-1d6c-667926167da5",
			"responses": [],
			"rawModeData": "{\n  \"email\": \"{{email}}\",\n  \"country\": \"{{country}}\",\n  \"interest_ids\": [\n    \"65\",\"53\",\"171\",\"37\",\"67\",\"152\",\"82\",\"137\",\"138\",\"2\",\"102\",\"29\",\"109\",\"183\",\"54\",\"50\",\"395\",\"419\",\"81\",\"532\"\n  ],\n  \"interests_updated_from\": \"android\"\n}"
		},
		{
			"id": "c7c6fee2-8811-636d-ac45-ff00c164b71f",
			"headers": "Content-Type: application/json\n",
			"url": "{{HOST}}/v1/account/newsletters/subscribe?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "var response = JSON.parse(responseBody);\n\n// //standard array of tests\ntests[\"Successful POST request\"] = responseCode.code === 200;\ntests[\"Response has data field\"] = responseBody.has(\"data\");\ntests[\"Response has no errors\"] = jQuery.isEmptyObject(response.errors);\n\n// //case specific tests\ntests[\"email_marketing_opt_in is true\"] = response.data.email_marketing_opt_in === true;\n\ntests[\"london added to newsletter_centre_ids\"] = response.data.newsletter_centre_ids.includes(\"london\");\ntests[\"stratfordcity added to newsletter_centre_ids\"] = response.data.newsletter_centre_ids.includes(\"stratfordcity\");\ntests[\"london_general subscribed to\"] = response.data.newsletter_subscriptions.includes(\"london_general\");\ntests[\"stratfordcity_general subscribed to\"] = response.data.newsletter_subscriptions.includes(\"stratfordcity_general\");\ntests[\"newsletter_subscriptions return the correct quantity\"] = response.data.newsletter_subscriptions.length === 2;\ntests[\"primary_centre_id returns correctly\"] = response.data.primary_centre_id === \"london\";",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468966545921,
			"name": "Subscribe to newsletters",
			"description": "Request creation of newsletter subscriptions for account.",
			"collectionId": "29ea12cd-2d9e-d310-1d6c-667926167da5",
			"responses": [],
			"rawModeData": "{\n  \"country\": \"{{country}}\",\n  \"email\": \"{{email}}\",\n  \"first_name\": \"Jimmy\",\n  \"newsletter_subscriptions\": [\n    \"london_general\", \"stratfordcity_general\"\n  ],\n  \"primary_centre_id\": \"{{centre}}\"\n}"
		},
		{
			"id": "c814b5e5-fd71-fe98-3b09-19e9e85c06a8",
			"headers": "Authorization: {{staff_access_token}}\n",
			"url": "{{HOST}}/v1/people/{{person_id}}/vehicles?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "var response = JSON.parse(responseBody);\n\n//standard array of tests\ntests[\"Successful GET request\"] = responseCode.code === 200;\ntests[\"Response has data field\"] = responseBody.has(\"data\");\ntests[\"Response has no errors\"] = jQuery.isEmptyObject(response.errors);\n\ntests[\"License plate returns correctly\"] = response.data[0].license_plate === environment.license_plate;\ntests[\"Vehicle name returns correctly\"] = response.data[0].name === \"Vehicle\";",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468279066006,
			"name": "Retrieve all vehicles from a person.",
			"description": "Retrieve all vehicles from a person.",
			"collectionId": "29ea12cd-2d9e-d310-1d6c-667926167da5",
			"responses": []
		},
		{
			"id": "cfe369bb-c98b-b8d0-80d2-f914a20813f6",
			"headers": "Authorization: {{parking_access_token}}\nContent-Type: application/json\n",
			"url": "{{HOST}}/v1/parking/activities?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "var response = JSON.parse(responseBody);\n\n//standard array of tests\ntests[\"Successful POST request\"] = responseCode.code === 201;\ntests[\"Response has data field\"] = responseBody.has(\"data\");\ntests[\"Response has no errors\"] = jQuery.isEmptyObject(response.errors);\n\n//case specific tests\n\ntests[\"email address returns correctly\"] = response.data.activity_type === \"parking_exit\";\ntests[\"email_marketing_opt_in is true\"] = response.data.centre_id === \"london\";\ntests[\"first_name returns correctly\"] = response.data.currency === \"GBP\";\ntests[\"last_name returns correctly\"] = response.data.transaction_final_amount === 3000;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468519700292,
			"name": "Create a parking activity.exit",
			"description": "Request creation of a parking activity from JSON data in the request body.",
			"collectionId": "29ea12cd-2d9e-d310-1d6c-667926167da5",
			"responses": [],
			"rawModeData": "{\n  \"access_device\": \"{{license_plate}}\",\n  \"activity_type\": \"parking_exit\",\n  \"activity_at\": \"2016-06-08T09:15:11.436Z\",\n  \"centre_id\": \"{{centre}}\",\n  \"currency\": \"GBP\",\n  \"payment_method_token\": \"{{payment_method_token}}\",\n  \"person_id\": \"{{person_id}}\",\n  \"transaction_final_amount\": 3000\n}"
		},
		{
			"id": "d0ead605-21fe-88f2-88b2-abef432b6147",
			"headers": "Authorization: {{parking_access_token}}\nContent-Type: application/json\n",
			"url": "{{HOST}}/v1/parking/activities?api_key={{api_key}}",
			"pathVariables": {},
			"preRequestScript": "",
			"method": "POST",
			"collectionId": "29ea12cd-2d9e-d310-1d6c-667926167da5",
			"data": [],
			"dataMode": "raw",
			"name": "Create a parking activity.entry",
			"description": "Request creation of a parking activity from JSON data in the request body.",
			"descriptionFormat": "html",
			"time": 1468277305228,
			"version": 2,
			"responses": [],
			"tests": "var response = JSON.parse(responseBody);\n\n//standard array of tests\ntests[\"Successful POST request\"] = responseCode.code === 201;\ntests[\"Response has data field\"] = responseBody.has(\"data\");\ntests[\"Response has no errors\"] = jQuery.isEmptyObject(response.errors);\n\n//case specific tests\n\ntests[\"email address returns correctly\"] = response.data.activity_type === \"parking_entry\";\ntests[\"email_marketing_opt_in is true\"] = response.data.centre_id === \"london\";\ntests[\"first_name returns correctly\"] = response.data.currency === \"GBP\";\ntests[\"last_name returns correctly\"] = response.data.transaction_final_amount === 0;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"folder": "f2726d3a-0d9f-725f-2291-9fc58e283124",
			"rawModeData": "{\n  \"access_device\": \"{{license_plate}}\",\n  \"activity_type\": \"parking_entry\",\n  \"activity_at\": \"2016-06-07T16:31:42.713Z\",\n  \"centre_id\": \"{{centre}}\",\n  \"currency\": \"GBP\",\n  \"payment_method_token\": \"{{payment_method_token_1}}\",\n  \"person_id\": \"{{person_id}}\",\n  \"transaction_final_amount\": 0\n}"
		},
		{
			"id": "d1df65c6-18d1-ebce-ad57-8641a59e82d3",
			"headers": "Content-Type: application/json\n",
			"url": "{{HOST}}/v1/staff/token?api_key=BEPH3JFgNsYetXCBx6tOdHGJzA6rwjgY",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "var response = JSON.parse(responseBody);\n\npostman.setEnvironmentVariable(\"parking_access_token\", \"bearer \" + response.access_token);\n\ntests[\"Token was successfully generated\"] = responseCode.code === 200;\ntests[\"Token returned is correct type\"] = response.token_type === \"bearer\"\ntests[\"Token returned has correct scope\"] = response.scope === \"parkiq\"\n\n\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468277201238,
			"name": "Create staff OAuth token (parking).",
			"description": "If you send the grant type `client_credentials` you must also provide the `client_id` and `client_secret`. If you send the grant type `password` you must also provide the `username` and `password`; you may optionally provide `client_id` and `client_secret`. If you send the grant type as `authorization_code`, you must provide the `client_id` and `client_secret` along with the `code` and `redirect_uri`.",
			"collectionId": "29ea12cd-2d9e-d310-1d6c-667926167da5",
			"responses": [],
			"rawModeData": "{\n  \"grant_type\":\"client_credentials\",\n  \"client_id\":\"{{parking_staff_id}}\",\n  \"client_secret\": \"{{parking_staff_secret}}\",\n  \"scope\": \"parkiq\"\n}"
		},
		{
			"id": "d74765bd-d46e-15ed-fdd5-b6c0cc7ad05d",
			"headers": "Authorization: {{Authorization}}\n",
			"url": "{{HOST}}/v1/account/credit_cards?page={{page}}&per_page={{per_page}}&api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "var response = JSON.parse(responseBody);\n\n//standard array of tests\ntests[\"Successful GET request\"] = responseCode.code === 200;\ntests[\"Response has data field\"] = responseBody.has(\"data\");\ntests[\"Response has no errors\"] = jQuery.isEmptyObject(response.errors);\ntests[\"Response has meta field\"] = responseBody.has(\"meta\");\n\n//case specific tests\ntests[\"correct quantity of cards returned\"] = response.data.length === 1;\ntests[\"card_type returns correctly\"] = response.data[0].card_type === \"visa\";\ntests[\"first_name returns correctly\"] = response.data[0].first_name === \"Johnny\";\ntests[\"last_name returns correctly\"] = response.data[0].last_name === \"Lyonhart\";\ntests[\"stored card number values return correctly\"] = response.data[0].first_six_digits === \"411111\" && response.data[0].last_four_digits === \"1111\";\ntests[\"parking_card returns correctly\"] = response.data[0].parking_card === true;\ntests[\"payment_method_token returns correctly\"] = response.data[0].payment_method_token === environment.payment_method_token;\ntests[\"month returns correctly\"] = response.data[0].month === 10;\ntests[\"year returns correctly\"] = response.data[0].year === 2019;\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1469571623219,
			"name": "List user credit cards.",
			"description": "Request an array of credit cards.",
			"collectionId": "29ea12cd-2d9e-d310-1d6c-667926167da5",
			"responses": []
		},
		{
			"id": "d8b2fe9d-9113-ce36-871d-3531663ad78e",
			"headers": "Content-Type: application/json\n",
			"url": "https://secure.uat.westfield.io/v1/account?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "var response = JSON.parse(responseBody);\n\n//set environment variables\npostman.setEnvironmentVariable('email',response.data.email);\npostman.setEnvironmentVariable('person_id',response.data.person_id);\n\n\n//standard array of tests\ntests[\"Successful POST request\"] = responseCode.code === 201;\ntests[\"Response has data field\"] = responseBody.has(\"data\");\ntests[\"Response has no errors\"] = jQuery.isEmptyObject(response.errors);\ntests[\"Response has meta field\"] = responseBody.has(\"meta\");\n\n//case specific tests\ntests[\"email address returns correctly\"] = response.data.email.substring(0,24) === \"devnull_newsletter_flow_\" && response.data.email.substring(response.data.email.length, response.data.email.length-18) === \"@dbg.westfield.com\";\ntests[\"email_marketing_opt_in is true\"] = response.data.email_marketing_opt_in === true;\ntests[\"first_name returns correctly\"] = response.data.first_name === \"Billy\";\n\ntests[\"london added to newsletter_centre_ids\"] = response.data.newsletter_centre_ids.includes(\"london\");\ntests[\"london_general subscribed to\"] = response.data.newsletter_subscriptions.includes(\"london_general\");\ntests[\"newsletter_subscriptions return the correct quantity\"] = response.data.newsletter_subscriptions.length === 1;\ntests[\"person_id starts with 'WF-'\"] = response.data.person_id.substring(0,3) === \"WF-\";\ntests[\"primary_centre_id returns correctly\"] = response.data.primary_centre_id === \"london\";\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468282544121,
			"name": "Create a person account.",
			"description": "Create a person account.",
			"collectionId": "29ea12cd-2d9e-d310-1d6c-667926167da5",
			"responses": [],
			"rawModeData": "{\n  \"creation_source\": \"newsletter\",\n  \"email\": \"devNull_newsletter_flow_{{$timestamp}}@dbg.westfield.com\",\n  \"email_marketing_opt_in\": true,\n  \"first_name\": \"Billy\",\n  \"newsletter_subscriptions\": [],\n  \"primary_centre_id\": \"london\"\n}"
		},
		{
			"id": "dd3cb2f1-066b-3535-5c8a-8def702701ce",
			"headers": "Authorization: {{Authorization}}\n",
			"url": "{{HOST}}/v1/account/parking/sessions/summary?centre_id={{centre}}&license_plate={{license_plate}}&page=1&per_page=150&api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "var response = JSON.parse(responseBody);\nvar data = response.data[0];\n\n//standard array of tests\ntests[\"Successful POST request\"] = responseCode.code === 200;\ntests[\"Response has data field\"] = responseBody.has(\"data\");\ntests[\"Response has data field\"] = responseBody.has(\"meta\");\ntests[\"Response has no errors\"] = jQuery.isEmptyObject(response.errors);\n\n//case specific tests\n\ntests[\"month returns correctly\"] = data.month === 6;\ntests[\"year returns correctly\"] = data.year === 2016;\ntests[\"total cost returns correctly\"] = data.total_cost === \"£30.00\";\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1467933128943,
			"name": "List all parking sessions summary for a license plate.",
			"description": "Request an array of parking sessions summary for a license plate.",
			"collectionId": "29ea12cd-2d9e-d310-1d6c-667926167da5",
			"responses": []
		},
		{
			"id": "e3e88d47-5d35-b1a4-461c-f8e7308b2234",
			"headers": "Authorization: {{Authorization}}\n",
			"url": "{{HOST}}/v1/account/vehicles/{{license_plate}}?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Vehicle successfully deleted\"] = responseCode.code === 204;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1467933375004,
			"name": "Delete a vehicle.",
			"description": "Request deletion of a vehicle.",
			"collectionId": "29ea12cd-2d9e-d310-1d6c-667926167da5",
			"responses": []
		},
		{
			"id": "e68726dd-6062-40cd-009a-7000202a6cdc",
			"headers": "Authorization: {{Authorization}}\n",
			"url": "{{HOST}}/v1/payments/payment_methods/{{payment_method_token}}?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "/*\n**\n**    Happy Path\n**\n*/\n\nvar response = JSON.parse(responseBody);\n\n//standard array of tests\ntests[\"Successful GET request\"] = responseCode.code === 200;\ntests[\"Response has data field\"] = responseBody.has(\"data\");\ntests[\"Response has no errors\"] = response.errors = {};\n\n//case specific tests\n\ntests[\"card_type is true\"] = response.data.card_type === \"visa\";\ntests[\"fingerprint returns correctly\"] = response.data.fingerprint === environment.fingerprint;\ntests[\"first_name returns correctly\"] = response.data.first_name === \"Johnny\";\ntests[\"last_name returns correctly\"] = response.data.last_name === \"Lyonhart\";\ntests[\"first_six_digits returns correctly\"] = response.data.first_six_digits === \"411111\";\ntests[\"last_four_digits returns correctly\"] = response.data.last_four_digits === \"1111\";\ntests[\"month returns correctly\"] = response.data.month === \"10\";\ntests[\"year returns correctly\"] = response.data.year === \"2019\";\ntests[\"payment_method_token returns correctly\"] = response.data.payment_method_token === environment.payment_method_token;\ntests[\"payment_method returns correctly type\"] = response.data.payment_method_type === \"credit_card\";\ntests[\"postal_code returns correctly\"] = response.data.postal_code === \"17377\";",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1469571815507,
			"name": "Retrieve a payment method.",
			"description": "Request the details of a payment method.",
			"collectionId": "29ea12cd-2d9e-d310-1d6c-667926167da5",
			"responses": []
		},
		{
			"id": "eb086dd2-d541-302d-0262-b0bac03f005f",
			"headers": "Authorization: {{Authorization}}\n",
			"url": "{{HOST}}/v1/account/interests?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "var response = JSON.parse(responseBody);\n\n//standard array of tests\ntests[\"Successful POST request\"] = responseCode.code === 200;\ntests[\"Response has data field\"] = responseBody.has(\"data\");\ntests[\"Response has no errors\"] = jQuery.isEmptyObject(response.errors);\ntests[\"Response has meta field\"] = responseBody.has(\"meta\");\n\n//case specific tests\ntests[\"All interests accounted for\"] = response.data.length === 20;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468361902261,
			"name": "Retrieve account interests.",
			"description": "Retrieve account interests. Requires authentication. Retrieving interest list for partial accounts is not supported.",
			"collectionId": "29ea12cd-2d9e-d310-1d6c-667926167da5",
			"responses": []
		},
		{
			"id": "eb77f3c2-cdac-fc1a-18c0-0d2f66ecff9f",
			"headers": "Content-Type: application/json\n",
			"url": "{{HOST}}/v1/account?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "var response = JSON.parse(responseBody);\n\n//set environment variables\npostman.setEnvironmentVariable('email',response.data.email);\npostman.setEnvironmentVariable('person_id',response.data.person_id);\npostman.setEnvironmentVariable('end_date',response.data.created_at.substring(0,10));\n\n//standard array of tests\ntests[\"Successful POST request\"] = responseCode.code === 201;\ntests[\"Response has data field\"] = responseBody.has(\"data\");\ntests[\"Response has no errors\"] = jQuery.isEmptyObject(response.errors);\ntests[\"Response has meta field\"] = responseBody.has(\"meta\");\n\n//case specific tests\n\ntests[\"email address returns correctly\"] = response.data.email === environment.email;\ntests[\"email_marketing_opt_in is true\"] = response.data.email_marketing_opt_in === true;\ntests[\"first_name returns correctly\"] = response.data.first_name === \"Eli\";\ntests[\"last_name returns correctly\"] = response.data.last_name.substring(0,9) === \"Lyonhart_\";\n\nfor (var key in response.data.messaging_preferences.food){\n  tests[\"messaging_preferences[food] are all false\"] = response.data.messaging_preferences.food[key] === false;\n}\nfor (var key in response.data.messaging_preferences.parking){\n  tests[\"messaging_preferences[parking] are all false\"] = response.data.messaging_preferences.parking[key] === false;\n}\n\ntests[\"london added to newsletter_centre_ids\"] = response.data.newsletter_centre_ids.includes(\"london\");\n\ntests[\"london_general subscribed to\"] = response.data.newsletter_subscriptions.includes(\"london_general\");\ntests[\"newsletter_subscriptions return the correct quantity\"] = response.data.newsletter_subscriptions.length === 1;\n\ntests[\"person_id starts with 'WF-'\"] = response.data.person_id.substring(0,3) === \"WF-\";\ntests[\"phone_number returns correctly\"] = response.data.phone_number === \"445551000000\";\ntests[\"primary_centre_id returns correctly\"] = response.data.primary_centre_id === \"london\";\n\n// tests[\"registered_for_parking returns correctly\"] = response.data.registered_for_parking === true; < - - - this route doesnt respond?\ntests[\"sms_marketing_opt_in returns correctly\"] = response.data.sms_marketing_opt_in === true;\n\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468278505259,
			"name": "Create a person account.",
			"description": "Create a person account.",
			"collectionId": "29ea12cd-2d9e-d310-1d6c-667926167da5",
			"responses": [],
			"rawModeData": "{\n  \"creation_source\": \"newsletter\",\n  \"email\": \"devNull_staff_flow_{{$timestamp}}@dbg.westfield.com\",\n  \"email_marketing_opt_in\": true,\n  \"first_name\": \"Eli\",\n  \"gender\": \"female\",\n  \"password\": \"{{password}}\",\n  \"last_name\": \"Lyonhart_{{$timestamp}}\",\n  \"newsletter_subscriptions\": [],\n  \"primary_centre_id\": \"{{centre}}\",\n  \"phone_number\": \"445551000000\",\n  \"registered_for_parking\": true,\n  \"sms_marketing_opt_in\": true\n}"
		},
		{
			"id": "efb8745c-697b-14dd-81fb-81971ca44a1f",
			"headers": "",
			"url": "http://fake-response.appspot.com/?sleep=5",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "GET",
			"collectionId": "29ea12cd-2d9e-d310-1d6c-667926167da5",
			"data": null,
			"dataMode": "params",
			"name": "sleep 5",
			"description": "",
			"descriptionFormat": "html",
			"time": 1467839067225,
			"version": 2,
			"responses": [],
			"tests": null,
			"currentHelper": "normal",
			"helperAttributes": {},
			"folder": "eefb8de5-d825-24ef-7429-29c77d777ea0"
		},
		{
			"id": "f8641c01-d4d9-2485-ff55-d3dbc78a1fca",
			"headers": "Authorization: {{Authorization}}\n",
			"url": "{{HOST}}/v1/favorites?page=1&per_page=150&api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "var response = JSON.parse(responseBody);\n\n//standard array of tests\ntests[\"Successful GET request\"] = responseCode.code === 200;\ntests[\"Response has data field\"] = responseBody.has(\"data\");\ntests[\"Response has no errors\"] = jQuery.isEmptyObject(response.errors);\ntests[\"Response has meta field\"] = responseBody.has(\"meta\");\n\n//case specific tests\ntests[\"Correct number of favorites returned\"] = response.data.length === 4;\n\nfor (var i=0; i<response.data.length; i++){\n    switch (response.data[i].kind){\n        case \"event\":\n            tests[\"correct deal added\"] = response.data[i].resource_id === environment.event_id;\n            tests[\"'event populated\"] = !jQuery.isEmptyObject(response.data[i].data.event);\n             break;\n        case \"deal\":\n            tests[\"correct event is added\"] = response.data[i].resource_id === environment.deal_id;\n            tests[\"'deal' is populated\"] = !jQuery.isEmptyObject(response.data[i].data.deal);\n            break;\n        case \"retailer\":\n            tests[\"correct retailer is added\"] = response.data[i].resource_id === environment.retailer_id;\n            tests[\"'retiler' is populated\"] = !jQuery.isEmptyObject(response.data[i].data.retailer);\n            break;\n        case \"product\":\n            tests[\"correct product is added\"] = response.data[i].resource_id === environment.product_id;\n            tests[\"'product' is populated\"] = !jQuery.isEmptyObject(response.data[i].data.product);\n            break;\n      default:\n        break;\n    }\n}",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468969978405,
			"name": "Retrieve the favorite items.",
			"description": "Retrieve the favorite items.",
			"collectionId": "29ea12cd-2d9e-d310-1d6c-667926167da5",
			"responses": []
		},
		{
			"id": "fa8a82da-1a99-67be-8ef5-87d062b4c6b5",
			"headers": "Content-Type: application/json\n",
			"url": "https://core.spreedly.com/v1/payment_methods.json?environment_key={{spreedly_env_key}}&api_key={{spreedly_api_key}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "var response = JSON.parse(responseBody);\npostman.setEnvironmentVariable('payment_method_token',response.transaction.payment_method.token);\npostman.setEnvironmentVariable('fingerprint',response.transaction.payment_method.fingerprint);\n\ntests[\"Successful POST request\"] = responseCode.code === 201;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1469571756138,
			"name": "Spreedly: Add Card1",
			"description": "",
			"collectionId": "29ea12cd-2d9e-d310-1d6c-667926167da5",
			"responses": [],
			"rawModeData": "{\n  \"month\": \"8\",\n  \"year\": \"2019\",\n  \"number\": \"4111111111111111\", \n  \"card_type\": \"visa\", \n  \"first_name\": \"Johnny\", \n  \"last_name\": \"Lyonhart: Secret Agent\", \n  \"zip\": \"17377\"\n}"
		},
		{
			"id": "faedd680-7008-8e73-c63c-bcf8391992bb",
			"headers": "Authorization: {{Authorization}}\nContent-Type: application/json\n",
			"url": "{{HOST}}/v1/account/credit_cards?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "var response = JSON.parse(responseBody);\n\n//standard array of tests\ntests[\"Successful POST request\"] = responseCode.code === 201;\ntests[\"Response has data field\"] = responseBody.has(\"data\");\ntests[\"Response has no errors\"] = response.errors = {};\n\n//case specific tests\ntests[\"card_type is true\"] = response.data.card_type === \"visa\";\ntests[\"first_name returns correctly\"] = response.data.first_name === \"Johnny\";\ntests[\"last_name returns correctly\"] = response.data.last_name === \"Lyonhart: Secret Agent\";\ntests[\"first_six_digits returns correctly\"] = response.data.first_six_digits === \"411111\";\ntests[\"last_four_digits returns correctly\"] = response.data.last_four_digits === \"1111\";\ntests[\"month returns correctly\"] = response.data.month === 8;\ntests[\"year returns correctly\"] = response.data.year === 2019;\ntests[\"payment_method_token returns correctly\"] = response.data.payment_method_token === environment.payment_method_token;\ntests[\"postal_code returns correctly\"] = response.data.postal_code === \"17377\";\ntests[\"parking_card returns correctly\"] = response.data.parking_card === false;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1469571735870,
			"name": "Add a credit card to a user account.1",
			"description": "Request adding a credit card to a user account from JSON data in the request body.",
			"collectionId": "29ea12cd-2d9e-d310-1d6c-667926167da5",
			"responses": [],
			"rawModeData": "{\n  \"payment_method_token\": \"{{payment_method_token}}\"\n}"
		},
		{
			"id": "fc3cfe40-04e4-b7eb-4a52-8dd543f82b95",
			"headers": "Authorization: {{staff_access_token}}\n",
			"url": "{{HOST}}/v1/people/{{person_id}}/kids?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "var response = JSON.parse(responseBody);\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\ntests[\"All kids accounted for\"] = response.data.length = 9;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468264177305,
			"name": "Retrieve kids in account.",
			"description": "Retrieve kids in account for the given person_id. Requires staff authentication.",
			"collectionId": "29ea12cd-2d9e-d310-1d6c-667926167da5",
			"responses": []
		},
		{
			"id": "fe6f3b82-7a12-c61b-7254-5637173759fa",
			"headers": "Authorization: {{Authorization}}\nContent-Type: application/json\n",
			"url": "{{HOST}}/v1/favorites/items?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "var response = JSON.parse(responseBody);\n\n//set environment variables\npostman.setEnvironmentVariable('email',response.data.email);\npostman.setEnvironmentVariable('person_id',response.data.person_id);\npostman.setEnvironmentVariable('end_date',response.data.created_at.substring(0,10));\n\n//standard array of tests\ntests[\"Successful POST request\"] = responseCode.code === 201;\ntests[\"Response has data field\"] = responseBody.has(\"data\");\ntests[\"Response has no errors\"] = jQuery.isEmptyObject(response.errors);\ntests[\"Response has meta field\"] = responseBody.has(\"meta\");\n\n\n//case specific tests\ntests[\"Correct item name returned\"] = response.data.data.product.name === \"Jacques Vert Large Med Flower Print Dress\";\ntests[\"Correct retailer_name returned\"] = response.data.data.product.retailer_name === \"Debenhams\";\ntests[\"Correct resource 'kind' returned\"] = response.data.kind === \"product\";\ntests[\"Correct resource_id returned\"] = response.data.resource_id === environment.product_id;\n\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468366729825,
			"name": "Add an item to the favorites list.",
			"description": "Add an item to the favorites list.",
			"collectionId": "29ea12cd-2d9e-d310-1d6c-667926167da5",
			"responses": [],
			"rawModeData": "{\n  \"kind\": \"product\",\n  \"resource_id\": \"{{product_id}}\",\n  \"platform_source\": \"android\"\n}"
		},
		{
			"id": "ff04f20e-1c2c-6580-a4c0-666cb7bb3087",
			"headers": "Authorization: {{Authorization}}\nContent-Type: application/json\n",
			"url": "{{HOST}}/v1/account/password?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "PATCH",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Successfully modify password\"] = responseCode.code === 204;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1467761338158,
			"name": "Change account password",
			"description": "Change account password",
			"collectionId": "29ea12cd-2d9e-d310-1d6c-667926167da5",
			"responses": [],
			"rawModeData": "{\n  \"current_password\": \"{{password}}\",\n  \"new_password\": \"{{patched_password}}\"\n}"
		},
		{
			"id": "ff2a5b18-fa83-8f59-3329-590e2617c062",
			"headers": "Authorization: {{staff_access_token}}\nContent-Type: application/json\n",
			"url": "{{HOST}}/v1/people/{{person_id}}/vehicles?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "var response = JSON.parse(responseBody);\n\npostman.setEnvironmentVariable('license_plate',response.data.license_plate);\n\n//standard array of tests\ntests[\"Successful POST request\"] = responseCode.code === 201;\ntests[\"Response has data field\"] = responseBody.has(\"data\");\ntests[\"Response has no errors\"] = jQuery.isEmptyObject(response.errors);\n\ntests[\"Vehicle has no previous parking history\"] = response.data.last_parking_session_at === null;\ntests[\"License plate returns correctly\"] = response.data.license_plate === environment.license_plate;\ntests[\"Vehicle name returns correctly\"] = response.data.name === \"Vehicle\";",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468269901854,
			"name": "Add a vehicle to a user account.",
			"description": "Request adding a vehicle to a user account from JSON data in the request body.",
			"collectionId": "29ea12cd-2d9e-d310-1d6c-667926167da5",
			"responses": [],
			"rawModeData": "{\n  \"license_plate\": \"QWER{{$randomInt}}\",\n  \"name\": \"Vehicle\"\n}"
		},
		{
			"id": "ff4ca849-8b9a-4678-3df8-83f335766101",
			"headers": "Authorization: {{staff_access_token}}\n",
			"url": "{{HOST}}/v1/people/{{person_id}}?api_key={{api_key}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "var response = JSON.parse(responseBody);\n\n//standard array of tests\ntests[\"Successful POST request\"] = responseCode.code === 200;\ntests[\"Response has data field\"] = responseBody.has(\"data\");\ntests[\"Response has no errors\"] = jQuery.isEmptyObject(response.errors);\ntests[\"Response has meta field\"] = responseBody.has(\"meta\");\n\n//case specific tests\ntests[\"person_id returns correctly\"] = response.data.person_id === environment.person_id;\ntests[\"email address returns correctly\"] = response.data.email === environment.email;\ntests[\"email_marketing_opt_in is true\"] = response.data.email_marketing_opt_in === true;\ntests[\"first_name returns correctly\"] = response.data.first_name === \"Eli\";\ntests[\"last_name returns correctly\"] = response.data.last_name.substring(0,9) === \"Lyonhart_\";\n\nfor (var key in response.data.messaging_preferences.food){\n  tests[\"messaging_preferences[food] are all false\"] = response.data.messaging_preferences.food[key] === false;\n}\nfor (var key in response.data.messaging_preferences.parking){\n  tests[\"messaging_preferences[parking] are all false\"] = response.data.messaging_preferences.parking[key] === false;\n}\n\ntests[\"london added to newsletter_centre_ids\"] = response.data.newsletter_centre_ids.includes(\"london\");\ntests[\"london_general subscribed to\"] = response.data.newsletter_subscriptions.includes(\"london_general\");\ntests[\"newsletter_subscriptions return the correct quantity\"] = response.data.newsletter_subscriptions.length === 1;\n\ntests[\"phone_number returns correctly\"] = response.data.phone_number === \"445551000000\";\ntests[\"primary_centre_id returns correctly\"] = response.data.primary_centre_id === \"london\";\n\n// tests[\"registered_for_parking returns correctly\"] = response.data.registered_for_parking === true; < - - - this route doesnt respond?\ntests[\"sms_marketing_opt_in returns correctly\"] = response.data.sms_marketing_opt_in === true;\n\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1468260813393,
			"name": "Retrieve a person account details.",
			"description": "Retrieve a person account details.",
			"collectionId": "29ea12cd-2d9e-d310-1d6c-667926167da5",
			"responses": []
		}
	]
}